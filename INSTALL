Elinks installation guidelines
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Quick guide for impatient:
  ./configure && make && make install
  Check out bottom of this file if you're upgrading from Links or older ELinks!

##########

  In order to check out the latest tree from CVS:

$ export CVSROOT=check_file_SITES_for_value_of_this
$ cvs login
(empty password)
$ cvs -z3 co elinks
$ cd elinks
...

  To update your checkouted tree to latest version in CVS, do:

$ cvs -z3 update -dP

  If you downloaded nightly snapshot, it already contains CVS/ directories etc.
Thus you should be able to update your tree like if you would checkout the
latest tree from CVS.

  Note that if you got the sources directly from CVS, you NEED to run
./autogen.sh then! (It should be enough to do it once, automake should be smart
enough to rerun itself when needed - however, if you'll have build problems, try
to run this first.) Also, you obviously need automake and autoconf installed in
your system (note that autoconf-2.13 a automake-1.4p5 is supported, newer ones
may cause problems thanks to auto* developers who don't know how to maintain
backwards compatibility). Otherwise, you have to use nightly CVS snapshot - you
don't need to do this there.


##########

  If you'll want to compile elinks, first check directory contrib/, if it
doesn't contain some patches which would be interesting for you. If you're
excited by any of them, try to apply it by doing

$ patch -p0 <contrib/that-pach

  It may not apply - I don't update patches in contrib/ regularily - if you
want, feel free to go and update the patch for current tree and send me the new
version.

  Usually, even after strip, ELinks binary can grow a lot these days; I plan to
spawning various extrnal files optionally, containing boring stuff like various
translations etc; later, even DSO modules may come etc. But even nowadays, you
can reduce resulting binary size by throwing out stuff you don't like. First, if
you want better performance and smaller binary, don't compile us with debug.  It
won't hurt you if you will, though, and ELinks will tell you about any memory
leaks, incorrect memory manipulation etc, which may be helpful for us if you'll
report it. Next, disable any optional features you are not going to use, they
can make resulting binary smaller (altough it'll probably have no non-marginal
performance imapact). Also, you may try to overtalk the build system to build
dynamically linked binary, which can be a lot smaller as well. Last, you can go
to Unicode/ and intl/ directories, edit index.txt and remove any codepages or
translations you don't like; especially for translations, it can significantly
reduce resulting binary size as well. Good luck!

  !BEWARE! If you _distribute_ binary of ELinks with OpenSSL linked to it, and
OpenSSL library is not part of your base system, you are VIOLATING GPL (altough
I believe that for this absurd case no ELinks copyright holder will sue you, and
it's not problem for OpenSSL people as well, as they explicitly told me).  So,
people who are making ELinks binary for system with OpenSSL not in base system
and who decided to link OpenSSL against ELinks binary may wish NOT tp publish or
distribute such a binary, as it's breaking GPL 2(b), if they like to have
everything legally perfect (like Debian people ;).  As a semi-solution to this
for these people, GNUTLS support was introduced; if you want to distribute
ELinks binary with HTTPS support, compile ELinks with --with-gnutls configure
option (assuming that you have GNUTLS 0.5.0 or later [tested with 0.5.4]
installed). However, as GNUTLS is not yet 100% stable and also its support in
ELinks is not so well tested, it's recommended for users to give strong
preference to OpenSSL, whenever possible.

  The basic compilation looks like:

  Unix - just doing:

         $ ./configure
         $ make

	 should be enough. However, in some FreeBSD 3 distributions you have to
	 set CFLAGS=-aout before running ./configure.

  OS/2 - you can use ./configure.

	 The only supported compiler is EMX, you probably won't be able to
	 compile it with anything else.

	 configure under OS/2 needs to know paths to gcc, make anb bash. Set
	 (for example):

	 SET HOSTTYPE=i586
	 SET MACHTYPE=i586-pc-os2
	 SET CONFIG_SHELL=d:/prg/gnu/bin/bash.exe
	 SET CC=d:/prg/emx/bin/gcc.exe
	 SET MAKE=d:/prg/emx/bin/make.exe
	 SET EMXOPT=-h100

  Dos, Windows - port it by yourself


##########

  Ok, now let's install it:

  Unix - # make install

  OS/2 - Copy file links.exe somewhere to your path or create CMD file that runs
	 links.

	 WARNING: EMX has nasty limit of open files. Links will work badly or
	 won't work with default settings. Set variable EMXOPT=-h100 before you
	 run links.

  Now, check the contrib/ directory again. There may be some useful configfile
examples there, along with few support tools and some Lua scripts - you probably
want them ;) so just copy the hooks.lua to ~/.links, and edit the configuration
part - it adds various nice functionality to elinks, like decompression of
gzipped files or user-defined protocols.


##########

  If you're upgrading from Links or older ELinks (0.4pre7 or older), you will
notice that serveral things changed. First, binary name is elinks, not links,
now; however, basic usage is almost same and it still looks like the old
(E)Links, so you probably want to make links symlink pointing to elinks.

  Then, note that configuration files were moved from /etc to /etc/elinks and
from ~/.links to ~/.elinks, because name and format of part of them changed:

  links.cfg became elinks.conf and you need to convert it with
contrib/conv/conf-links2elinks.pl; html.cfg was merged to elinks.conf

  bookmarks are still bookmarks, but you need to convert it with
old_to_new_bookmarks.sh.

  links.his became gotohist and the format is same

  history became globhist and the format is same

  cookies are still cookies, but you need to convert it with tr " " "\t"


##########

$Id: INSTALL,v 1.17 2002/08/27 10:51:47 pasky Exp $
vim: textwidth=80
