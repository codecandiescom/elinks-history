dnl Process this file with autoconf to produce a configure script.

AC_INIT(src/main.c)

AM_INIT_AUTOMAKE(elinks, 0.5pre0.CVS)
AM_CONFIG_HEADER(config.h)

AC_PROG_MAKE_SET

dnl ===================================================================
dnl Checks for programs.
dnl ===================================================================

AC_PROG_CC
AC_PROG_AWK
AC_PROG_RANLIB

dnl gcc specific options (to be continued at the bottom of configure)
if test "x$ac_cv_prog_gcc" = "xyes"; then
  dnl We want to see all warnings and live with none.
  dnl We can't set up -Werror here as there may be some warnings in test
  dnl suite of configure, and we don't want to fail them.
  CFLAGS="$CFLAGS -Wall"
fi

dnl ===================================================================
dnl Checks for special OSes.
dnl ===================================================================

AC_MSG_CHECKING([for EMX])
AC_TRY_COMPILE(, [#ifndef __EMX__
kill me!
#endif ], have_emx=yes, have_emx=no)
AC_MSG_RESULT($have_emx)
test "$have_emx" = yes && LDFLAGS=`echo "$LDFLAGS" | sed "s/-Zexe//g"`

dnl ===================================================================
dnl Checks for header files.
dnl ===================================================================

AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h limits.h time.h unistd.h)
AC_CHECK_HEADERS(sigaction.h)
AC_CHECK_HEADERS(arpa/inet.h)
AC_CHECK_HEADERS(netinet/in_systm.h netinet/in_system.h netinet/ip.h)
AC_CHECK_HEADERS(sys/cygwin.h io.h)
AC_CHECK_HEADERS(sys/fmutex.h)
AC_CHECK_HEADERS(sys/ioctl.h)
AC_CHECK_HEADERS(sys/resource.h)
AC_CHECK_HEADERS(sys/select.h)
AC_CHECK_HEADERS(sys/signal.h)
AC_CHECK_HEADERS(sys/time.h)
AC_CHECK_HEADERS(sys/un.h)
AC_CHECK_HEADERS(sys/utsname.h)
AC_CHECK_HEADERS(stdint.h inttypes.h)
AC_CHECK_HEADERS(locale.h)

dnl ===================================================================
dnl Checks for typedefs, structures, and compiler characteristics.
dnl ===================================================================

AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

AC_MSG_CHECKING([for typeof])
AC_TRY_COMPILE(, [int a; typeof(a) b;], have_typeof=yes, have_typeof=no)
AC_MSG_RESULT($have_typeof)
test "$have_typeof" = yes && AC_DEFINE(HAVE_TYPEOF)

AC_MSG_CHECKING([for long long])
AC_TRY_COMPILE(, [unsigned long long a; ], have_long_long=yes, have_long_long=no)
AC_MSG_RESULT($have_long_long)
test "$have_long_long" = yes && AC_DEFINE(HAVE_LONG_LONG)

AC_MSG_CHECKING([for int32_t])
AC_TRY_COMPILE([
#include <sys/types.h>
#ifdef HAVE_STDINT_H
#include <stdint.h>
#endif
#ifdef HAVE_INTTYPES_H
#include <inttypes.h>
#endif
], [int32_t a;], have_int32_t=yes, have_int32_t=no)
AC_MSG_RESULT($have_int32_t)
test "$have_int32_t" = yes && AC_DEFINE(HAVE_INT32_T)

AC_MSG_CHECKING([for uint32_t])
AC_TRY_COMPILE([
#include <sys/types.h>
#ifdef HAVE_STDINT_H
#include <stdint.h>
#endif
#ifdef HAVE_INTTYPES_H
#include <inttypes.h>
#endif
], [uint32_t a;], have_uint32_t=yes, have_uint32_t=no)
AC_MSG_RESULT($have_uint32_t)
test "$have_uint32_t" = yes && AC_DEFINE(HAVE_UINT32_T)

AC_CHECK_SIZEOF(char, 1)
AC_CHECK_SIZEOF(short, 2)
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(long, 4)
test "$have_long_long" = yes && AC_CHECK_SIZEOF(long long, 8)

dnl ===================================================================
dnl Checks for library functions.
dnl ===================================================================

AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
AC_FUNC_STRFTIME
AC_CHECK_FUNCS(alarm cfmakeraw chmod gethostbyaddr herror strcasestr strncasecmp timegm)
AC_CHECK_FUNCS(popen uname access)
AC_CHECK_FUNCS(strchr strrchr index rindex strstr strerror memmove bcopy)
AC_CHECK_FUNCS(isalnum)

AC_HAVE_FUNCS(cygwin_conv_to_full_win32_path)

dnl These aren't probably needed now, as they are commented in links.h.
dnl I've no idea about their historical background, but I keep them here
dnl just in the case they will help later. --pasky
AC_CHECK_FUNCS(getpid setpgid getpgid setpgrp getpgrp)

dnl ===================================================================
dnl Checks for libraries.
dnl ===================================================================

dnl Replace `main' with a function in -lsocket:
AC_CHECK_FUNC(socket, cf_result=yes, cf_result=no)
if test "$cf_result" = no; then
	AC_CHECK_LIB(socket, socket)
fi

AC_CHECK_FUNC(setsockopt, cf_result=yes, cf_result=no)
if test "$cf_result" = no; then
	AC_CHECK_LIB(socket, setsockopt)
fi

AC_CHECK_FUNC(gethostbyname, cf_result=yes, cf_result=no)
if test "$cf_result" = no; then
	AC_CHECK_LIB(socket, gethostbyname, cf_result=yes, cf_result=no)
	if test "$cf_result" = no; then
		AC_CHECK_LIB(nsl, gethostbyname)
	else
		test -z "`echo $LIBS | grep -- -lsocket`" && LIBS="$LIBS -lsocket"
	fi
fi


dnl ===================================================================
dnl Checks for gpm, optional even if installed.
dnl ===================================================================

AC_ARG_WITH(gpm, [  --without-gpm           disable gpm (mouse) support],
	[ if test "$withval" = no; then disable_gpm=yes; fi])
AC_MSG_CHECKING([for gpm support])

if test -z "$disable_gpm"; then
	AC_CHECK_HEADERS(gpm.h, cf_result=yes, cf_result=no)
	if test "$cf_result" = yes; then
		AC_CHECK_LIB(gpm, Gpm_Open)
	fi
else
	AC_MSG_RESULT(no)
fi

dnl ===================================================================
dnl Checks for zlib, optional even if installed.
dnl ===================================================================
AC_ARG_WITH(zlib, [  --without-zlib          disable zlib support],
	[ if test "$withval" = no; then disable_zlib=yes; fi])
AC_MSG_CHECKING([for zlib support])

if test -z "$disable_zlib"; then
	AC_CHECK_HEADERS(zlib.h, cf_result=yes, cf_result=no)
	if test "$cf_result" = yes; then
		AC_CHECK_LIB(z, gzdopen)
	fi
else
	AC_MSG_RESULT(no)
fi


dnl ===================================================================
dnl Checks for bzlib, optional even if installed.
dnl ===================================================================
AC_ARG_WITH(bzlib, [  --without-bzlib         disable bzlib support],
	[ if test "$withval" = no; then disable_bzlib=yes; fi])
AC_MSG_CHECKING([for bzlib support])

if test -z "$disable_bzlib"; then
	# Note that we won't define HAVE_LIBBZ2, altough we will define
	# HAVE_LIBZ. That's combination of autoconf's weirdness, my laziness
	# and lack of need for such a thing. Always use HAVE_BZLIB_H. --pasky
	AC_CHECK_HEADERS(bzlib.h, cf_result=yes, cf_result=no)
	if test "$cf_result" = yes; then
		AC_CHECK_LIB(bz2, BZ2_bzReadOpen)
	fi
else
	AC_MSG_RESULT(no)
fi

dnl
dnl XBEL
dnl
AC_ARG_WITH(xbel, [  --without-xbel          disable XBEL bookmarks],
        [ if test "$withval" = no; then disable_xbel=yes; fi])
AC_MSG_CHECKING([for xbel support])
if test -z "$disable_xbel"; then
        AC_CHECK_HEADERS(expat.h, cf_result=yes, cf_result=no)
        if test "$cf_result" = yes; then
                AC_CHECK_LIB(expat, XML_ParserCreate)
        fi
else
        AC_MSG_RESULT(no)
fi



dnl ===================================================================
dnl Checks for OS/2
dnl ===================================================================

AC_MSG_CHECKING([for OS/2 threads])

CFLAGS_X="$CFLAGS"
CFLAGS="$CFLAGS -Zmt"

AC_TRY_LINK([#include <stdlib.h>],
            [_beginthread(NULL, NULL, 0, NULL)], cf_result=yes, cf_result=no)
AC_MSG_RESULT($cf_result)

if test "$cf_result" = yes; then
	AC_DEFINE(HAVE_BEGINTHREAD)
else
	CFLAGS="$CFLAGS_X"
        # AC_CHECK_FUNC(pthread_create, cf_result=yes, cf_result=no)
        # if  test "$cf_result" = yes; then
        #	AC_DEFINE(HAVE_PTHREADS)
        # else
        #	AC_CHECK_LIB(pthread, pthread_create, AC_DEFINE(HAVE_PTHREADS)
        #	LDFLAGS="$LDFLAGS -lpthread" )
        # fi
fi

# AC_CHECK_FUNC(clone, AC_DEFINE(HAVE_CLONE))

AC_CHECK_FUNC(MouOpen, AC_DEFINE(HAVE_MOUOPEN))
AC_CHECK_FUNC(_read_kbd, AC_DEFINE(HAVE_READ_KBD))

AC_MSG_CHECKING([for XFree for OS/2])

CFLAGS_X="$CFLAGS"
LIBS_X="$LIBS"

cf_result=no

if test -n "$X11ROOT"; then
	CFLAGS="$CFLAGS_X -I$X11ROOT/XFree86/include"
	LIBS="$LIBS_X -L$X11ROOT/XFree86/lib -lxf86_gcc"
	AC_TRY_LINK([#include <pty.h>],
		    [struct winsize win;ptioctl(1, TIOCGWINSZ, &win)],
		    cf_result=yes, cf_result=no)
	if test "$cf_result" = no; then
		LIBS="$LIBS_X -L$X11ROOT/XFree86/lib -lxf86"
		AC_TRY_LINK([#include <pty.h>],
			    [struct winsize win;ptioctl(1, TIOCGWINSZ, &win)],
			    cf_result=yes, cf_result=no)
	fi
fi

if test "$cf_result" != yes; then
	CFLAGS="$CFLAGS_X"
	LIBS="$LIBS_X"
else
	AC_DEFINE(X2)
fi

AC_MSG_RESULT($cf_result)

dnl ===================================================================
dnl Check for Lua, optional even if installed.
dnl ===================================================================

AC_CHECK_LIB(dl, dlopen) # OpenSSL and Lua frequently needs it

dnl Do this the long way, as FreeBSD reportedly needs -L<dir> for
dnl anything other than /usr/lib, and Lua is very often in /usr/local/lib.

AC_ARG_WITH(lua, [  --without-lua           disable Lua support],
            [if test "$withval" = no;  then disable_lua=yes; fi])
AC_MSG_CHECKING([for Lua])

CFLAGS_X="$CFLAGS"
LIBS_X="$LIBS"
cf_result=no

if test -z "$disable_lua"; then
	# It's double here in order to have the piggyswitch hack working
	# Hack, indeed. Guess why? Yes, it's Debian!
	for luadir in "" /usr /usr /usr/local /usr/local; do
		if test "$cf_result" = no; then
			if test "$xyz_piggyswitch" = "cow"; then
				LIBS="-llua40 -llualib40 -lm $LIBS_X"
			else
				LIBS="-llua -llualib -lm $LIBS_X"
			fi

			if test ! -z "$luadir"; then
				LIBS="-L$luadir/lib $LIBS"
				if test "$xyz_piggyswitch" = "cow"; then
					CFLAGS="$CFLAGS_X -I$luadir/include -I$luadir/include/lua40"
					# The switch should be performed at the last occurence
					xyz_piggyswitch=sheep
				else
					CFLAGS="$CFLAGS_X -I$luadir/include -I$luadir/include/lua"
					xyz_piggyswitch=cow
				fi
			fi

			AC_TRY_LINK([#include <lua.h>],
				    [lua_open(0)],
				    cf_result=yes, cf_result=no)
		fi
	done
fi

if test "$cf_result" != yes; then
	CFLAGS="$CFLAGS_X"
	LIBS="$LIBS_X"
else
	AC_DEFINE(HAVE_LUA)
	AC_DEFINE(HAVE_SCRIPTING)
fi

AC_MSG_RESULT($cf_result)

dnl ===================================================================
dnl Check for SSL support.
dnl ===================================================================

dnl We by default use OpenSSL, and we always prefer it. However, when GNUTLS
dnl is enabled, we won't try to use OpenSSL anymore.

dnl For wiping SSL hooks..
#ifdef HAVE_SSL

disable_openssl=""
disable_gnutls=""
enable_gnutls=""

AC_ARG_WITH(gnutls, [  --without-gnutls        disable GNUTLS SSL support],
	    [if test "$with_gnutls" = no;  then disable_gnutls=yes; fi])
AC_ARG_WITH(gnutls, [  --with-gnutls[=prefix]  enable GNUTLS SSL support],
	    [enable_gnutls=yes;])
gnutls_withval="$withval"

if test "$enable_gnutls"; then
	disable_openssl=yes;
fi

AC_ARG_WITH(openssl, [  --without-openssl       disable OpenSSL support],
	    [if test "$with_openssl" = no;  then disable_openssl=yes; fi])
AC_ARG_WITH(openssl, [  --with-openssl[=prefix] enable OpenSSL support (default)])
openssl_withval="$withval"

dnl ---- OpenSSL

AC_MSG_CHECKING([for OpenSSL])

CFLAGS_X="$CFLAGS"
LIBS_X="$LIBS"
cf_result="no"

if test "$disable_openssl"; then
	cf_result="not used"
else
	for ssldir in "" "$openssl_withval" /usr /usr/local/openssl \
			 /usr/lib/openssl /usr/local/ssl \
			 /usr/local/www /usr/lib/ssl /usr/local \
			 /usr/pkg /opt /opt/openssl; do
		if test "$cf_result" = no; then
			if test ! -z "$ssldir"; then
				LIBS="-L$ssldir/lib -lssl -lcrypto $LIBS_X"
				CFLAGS="$CFLAGS_X -I$ssldir/include"
#				# FIXME: This created serious portability problems. --pasky
#				if test "$CC" == "gcc"; then
#					# I'm not sure about compatibility here. --pasky
#					LIBS="$LIBS -R$ssldir/lib"
#				fi
			else
				LIBS="-lssl -lcrypto $LIBS_X"
			fi
			AC_TRY_LINK([#include <openssl/ssl.h>],
				    [OpenSSL_add_all_algorithms()],
				    cf_result=yes, cf_result=no)
			if test "$cf_result" != yes; then
				AC_TRY_LINK([#include <openssl/ssl.h>],
					    [SSLeay_add_ssl_algorithms()],
					    cf_result=yes, cf_result=no)
			fi
		fi
	done

	if test "$cf_result" != yes; then
		if test "$withval" = yes; then
			AC_MSG_ERROR("OpenSSL not found")
		fi
	        CFLAGS="$CFLAGS_X"
        	LIBS="$LIBS_X"
	else
		AC_DEFINE(HAVE_OPENSSL)
		AC_DEFINE(HAVE_SSL)
	fi
fi

AC_MSG_RESULT($cf_result)

dnl ---- GNU TLS
dnl We can't have AC_MSG_CHECKING here, because AC_PATH_PROG prints its own and
dnl it looks ugly then.

if test "$cf_result" = yes; then
	cf_result="not used"
else
	CFLAGS_X="$CFLAGS"
	LIBS_X="$LIBS"
	cf_result="no"

	if test -z "$disable_gnutls"; then
		# Sure, we maybe _could_ use their macro, but how to ensure
		# that the ./configure script won't fail if the macro won't be
		# found..? :( --pasky
		for ssldir in "" "$gnutls_withval" /usr/local/gnutls /opt /opt/gnutls; do
			if test "$cf_result" = no; then

				if test "x$ssldir" != "x"; then
				   libgnutls_config_args="$libgnutls_config_args --prefix=$ssldir"
				   if test x${LIBGNUTLS_CONFIG+set} != xset ; then
				      LIBGNUTLS_CONFIG=$ssldir/bin/libgnutls-config
				   fi
				fi

				AC_PATH_PROG(LIBGNUTLS_CONFIG, libgnutls-config, no, "$PATH:$ssldir")

				if test "$LIBGNUTLS_CONFIG" = "no" ; then
					cf_result=no
				else
					LIBGNUTLS_CFLAGS=`$LIBGNUTLS_CONFIG $libgnutls_config_args --cflags`
					LIBGNUTLS_LIBS=`$LIBGNUTLS_CONFIG $libgnutls_config_args --libs`

					LIBS="$LIBGNUTLS_LIBS $LIBS_X"
					CFLAGS="$CFLAGS_X $LIBGNUTLS_CFLAGS"

					# Verify if it's really usable
					AC_TRY_LINK([#include <gnutls/gnutls.h>],
						    [gnutls_check_version(NULL)],
						    cf_result=yes, cf_result=no)
				fi
			fi
		done

		if test "$cf_result" != yes; then
			if test "$withval" = yes; then
				AC_MSG_CHECKING([for GNU TLS])
				AC_MSG_ERROR("GNUTLS not found")
			fi
			CFLAGS="$CFLAGS_X"
			LIBS="$LIBS_X"
		else
			AC_DEFINE(HAVE_GNUTLS)
			AC_DEFINE(HAVE_SSL)
		fi
	fi
fi

AC_MSG_CHECKING([for GNU TLS])
AC_MSG_RESULT($cf_result)

#endif

AC_MSG_CHECKING([whether to be or not to be])
AC_MSG_RESULT([needs to be determined experimentally])

dnl ===================================================================
dnl Check for IPv6 support and related functions.
dnl ===================================================================

AC_MSG_CHECKING([for sockaddr_storage])
AC_TRY_COMPILE([#include<sys/types.h>
		#include<sys/socket.h>],
               [int x = sizeof(struct sockaddr_storage);],
               have_sa_storage=yes, have_sa_storage=no)
AC_MSG_RESULT($have_sa_storage)
test "$have_sa_storage" = yes && AC_DEFINE(HAVE_SA_STORAGE)

AC_MSG_CHECKING([for sockaddr_in6])
AC_TRY_COMPILE([#include<sys/types.h>
		#include<sys/socket.h>
                #include<netinet/in.h>],
               [int x = sizeof(struct sockaddr_in6);],
               have_sa_in6=yes, have_sa_in6=no)
AC_MSG_RESULT($have_sa_in6)

AC_CHECK_FUNC(getaddrinfo, have_gai=yes, have_gai=no)
if test "$have_gai" != yes; then
  AC_CHECK_LIB(inet6, getaddrinfo, have_gai=yes, have_gai=no)
  if test "$have_gai" = yes; then
    LIBS="$LIBS -linet6"
  fi
fi

AC_ARG_ENABLE(ipv6, [  --disable-ipv6          disable IPv6 support],
              [if test "$enableval" = no; then disable_ipv6=yes; fi])
AC_MSG_CHECKING([for IPv6 support])

cf_result=no

if test -z "$disable_ipv6" &&
   test "$have_sa_storage" = yes &&
   test "$have_sa_in6" = yes &&
   test "$have_gai" = yes; then
	AC_DEFINE(IPV6)
	cf_result=yes
fi

AC_MSG_RESULT($cf_result)


dnl ===================================================================
dnl Checking for X11 (window title restoring).
dnl ===================================================================

AC_PATH_X
if test -z "$no_x"; then
	if test -n "$x_includes"; then
		CFLAGS="$CFLAGS -I$x_includes"
	fi
	if test -n "$x_libraries"; then
		LDFLAGS="$LDFLAGS -L$x_libraries"
	fi
	LIBS="-lX11 $LIBS"
	AC_DEFINE(HAVE_X11)
fi


dnl ===================================================================
dnl Gettext grey zone. Beware.
dnl ===================================================================

ALL_LINGUAS="cs"

AM_GNU_GETTEXT


dnl ===================================================================
dnl Compile-time features control
dnl ===================================================================

hm_enabled_debug="no";

AC_ARG_ENABLE(debug, [  --enable-debug          enable leak debug and internal error checking],
              [if test "$enableval" = yes; then hm_enabled_debug="yes"; AC_DEFINE(DEBUG) fi])

AC_ARG_ENABLE(leds, [  --enable-leds           enable the LED-like indicators support],
              [if test "$enableval" = yes; then AC_DEFINE(USE_LEDS) fi])

AC_ARG_ENABLE(bookmarks, [  --disable-bookmarks     disable internal bookmarks manager],
              [if test "$enableval" = yes; then AC_DEFINE(BOOKMARKS) fi],
	      AC_DEFINE(BOOKMARKS))

AC_ARG_ENABLE(cookies, [  --disable-cookies       disable internal cookies support],
              [if test "$enableval" = yes; then AC_DEFINE(COOKIES) fi],
	      AC_DEFINE(COOKIES))

AC_ARG_ENABLE(globhist, [  --disable-globhist      disable global history],
              [if test "$enableval" = yes; then AC_DEFINE(GLOBHIST) fi],
	      AC_DEFINE(GLOBHIST))

AC_ARG_ENABLE(mailcap, [  --disable-mailcap       disable mailcap support],
              [if test "$enableval" = yes; then AC_DEFINE(MAILCAP) fi],
	      AC_DEFINE(MAILCAP))

AC_ARG_ENABLE(fastmem, [  --enable-fastmem        enable direct use of system allocation functions, not useable with --enable-debug],
              [if test "$enableval" = yes && test "$hm_enabled_debug" = no; then AC_DEFINE(FASTMEM) fi])



dnl == EMX hack

test "$have_emx" = yes && LDFLAGS="$LDFLAGS -Zexe"
test "$have_emx" = yes && LDFLAGS=`echo "$LDFLAGS" | sed "s/-Zbin-files//g"`


# Create CONFDIR #define for config.h

sysconfdir_n=`(
    test "x$prefix" = xNONE && prefix=$ac_default_prefix
    test "x$exec_prefix" = xNONE && exec_prefix=${prefix}
    eval echo "$sysconfdir"
)`
sysconfdir=$sysconfdir_n
(echo "$sysconfdir" | grep elinks >/dev/null 2>/dev/null) || \
	sysconfdir="$sysconfdir/elinks"

CONFDIR=$sysconfdir
AC_DEFINE_UNQUOTED(CONFDIR,"$CONFDIR")
AC_SUBST(CONFDIR)


# Create LOCALEDIR #define for config.h

datadir_n=`(
    test "x$prefix" = xNONE && prefix=$ac_default_prefix
    test "x$exec_prefix" = xNONE && exec_prefix=${prefix}
    eval echo "$datadir"
)`
datadir=$datadir_n

LOCALEDIR=${datadir}/locale
AC_DEFINE_UNQUOTED(LOCALEDIR,"$LOCALEDIR")
AC_SUBST(LOCALEDIR)


dnl gcc specific options (continue)
if test "x$ac_cv_prog_gcc" = "xyes" && test "x$hm_enabled_debug" = "xyes"; then
  dnl We want to see all warnings and live with none.
  CFLAGS="$CFLAGS -Werror"
fi


AC_OUTPUT([ \
 Makefile \
 elinkskeys.5 \
 Unicode/Makefile \
 contrib/Makefile \
 contrib/elinks.spec \
 contrib/lua/hooks.lua \
 doc/Makefile \
 doc/book/Makefile \
 intl/Makefile \
 po/Makefile.in \
 src/Makefile \
 src/bfu/Makefile \
 src/bookmarks/Makefile \
 src/bookmarks/backend/Makefile \
 src/config/Makefile \
 src/cookies/Makefile \
 src/dialogs/Makefile \
 src/document/Makefile \
 src/document/html/Makefile \
 src/elusive/Makefile \
 src/elusive/layouter/Makefile \
 src/elusive/layouter/syntree/Makefile \
 src/elusive/parser/Makefile \
 src/elusive/parser/html/Makefile \
 src/elusive/renderer/Makefile \
 src/elusive/renderer/text/Makefile \
 src/globhist/Makefile \
 src/intl/Makefile \
 src/intl/gettext/Makefile \
 src/lowlevel/Makefile \
 src/lua/Makefile \
 src/osdep/Makefile \
 src/protocol/Makefile \
 src/protocol/http/Makefile \
 src/sched/Makefile \
 src/ssl/Makefile \
 src/util/Makefile \
 src/viewer/Makefile \
 src/viewer/dump/Makefile \
 src/viewer/text/Makefile \
 test/Makefile
])


# if test -z "$AWK"; then
# 	AC_WARN([awk not found. You won't be able to rebuild code page table.]);
# fi
