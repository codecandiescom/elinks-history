This is a super-simplistic CSS micro-engine.

What Is Gonna Be A FAQ: Why isn't the CSS support compile-time optional?

Answer: Because I want to eliminate all trivial styling (like html_h*()) and
substitute it with default stylesheet information, so that this can be
user-configured. On the other side we might yet reconsider whether we want that
before 1.0. Maybe we don't.

TODO: Its job is separated to two phases. The first phase is a parser, it takes
a string with CSS code and transforms it to an internal set of structures
describing the data (let's call it a "rawer"). The second phase is an applier,
which applies given rawer to the current element. --pasky

Currently only the element's 'style' attribute is checked, therefore the first
stage is not exported yet (it'd be useless for that). Only the second stage is
available now, and it doesn't take the stylesheet argument yet.  It will
automatically scan the current element, and if a 'style' attribute is found, it
is parsed and applied to the current element.


One big problem with the current way of doing things is inheritance, there is
no way we are telling the HTML engine what is going to be inherited and what is
not. The other problem is precedence, currently even global stylesheet takes
precedence over local classic-formatting attributes (we just css_apply() like
mad on various places to make sure the CSS attributes are stuffed through HTML
engine's throat). These two problems will be solved when the HTML engine is
converted to work with stylesheets natively (instead of format + par_format).
