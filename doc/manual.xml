<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<book lang="en">
<bookinfo>
    <title>The ELinks Manual</title>


</bookinfo>
<dedication>
<simpara>
Authors:
</simpara>

<itemizedlist>
<listitem>
<simpara>
Jonas Fonseca &lt;fonseca@diku.dk&gt;
</simpara>
</listitem>
<listitem>
<simpara>
Jose Luis Gonzalez Gonzalez &lt;jlg80@mi.madritel.es&gt;
</simpara>
</listitem>
<listitem>
<simpara>
Laurent Monin &lt;zas@norz.org&gt;
</simpara>
</listitem>
<listitem>
<simpara>
Miciah Dashiel Butler Masters &lt;miciah@myrealbox.com&gt;
</simpara>
</listitem>
<listitem>
<simpara>
Petr Baudis &lt;pasky@ucw.cz&gt;
</simpara>
</listitem>
</itemizedlist>
</dedication>
<preface>
<title>Preface</title>
<simpara>
Welcome! This is the entry point for the current humble ELinks manual.  It
is by no way complete, it is not even very homogeneous and it should be
eventually superseded by a complete ELinks Book.
</simpara>

<simpara>
There was a complete (or from a large part complete) manual for the Links
0.82 once, you can still find it at:
</simpara>

<literallayout class="monospaced">
http://links.sourceforge.net/docs/manual-0.82-en/index.html
</literallayout>
<simpara>
While large parts of it do not apply anymore, you may still find some
relevant information there.
</simpara>

<simpara>
Hold harmless the authors, and any lawful use is allowed.
</simpara>

<simpara>
$Revision: 1.1 $ $Date: 2005/05/17 16:16:31 $
</simpara>

</preface>
<chapter>
<title>Introduction to the World of ELinks</title>
<simpara>
The goal of this introduction is to explain the basic concepts in ELinks,
give an overview of how to get started and serve as an entry point to many
of the (undocumented) features of ELinks.  It won't tell you all the
details, but should hopefully give you an idea of how things work and make
it possible for you to even figure out how to go further.
</simpara>

<simpara>
Although ELinks is text-based, the user interface has many of interaction
methods normally found in graphical environments.  There are menus, dialogs
with buttons and hierarchic list boxes with folders. Care has been taken to
make the interaction between various dialogs consistent, so the controls
will quickly become familiar to new users.
</simpara>

<simpara>
The user interface can be controlled using both mouse and keyboard, but
currently it is only possible to configure keybindings. Looking back, the
key-controls have been more advanced than the mouse support, but during the
0.10 prereleases the mouse support has been much improved. You will now find
find stuff like contextual menus when right-clicking in different document
zones.
</simpara>

<section>
<title>Overview of the User Interface</title>
<simpara>
The main user interface of ELinks consists of the document view and dialog
bars displaying the information such as the title of the currently viewed
document, all opened tabs and the browsing status. The 3 bars are elaborated
further below.
</simpara>

<simpara>
The most important dialogs that you will meet include the Main, Link and Tab
menus and the different managers. The menus serve as entry points to the
actions available from different contexts, while the managers let you check
the state and control the various subsystems, such as loaded cookies and the
global history. The utility menus and the manager tools are investigated
further below.
</simpara>

<simpara>
The document viewer in ELinks provides a feature-rich set of ways to browse
documents. That is, multiple options exist for navigating, searching and
displaying documents and you will hopefully figure in time what works best
for you. The basic browsing possibilities are presented below.
</simpara>

<simpara>
ELinks is highly configurable, so if there is something that you would like
to change, it is most likely possible. The best overview of the many options
are given in the elinks.conf(5) man page.  Keybindings are discussed in the
elinkskeys(5) man page.  It is not always up-to-date, so you should also
check the keybinding manager and the overview of all the configured
keybindings given in the Help -&gt; Keys dialog. The Keys dialogs serves as a
good introduction to the most common keybindings.
</simpara>

</section>
<section>
<title>The Title, Tab and Status bar</title>
<simpara>
The title bars main purpose is to display the title of the current document.
Documents bigger than can be displayed with the current screen size are
divided into subpages. In this case the current document position is
indicated in the far right of the title bar as a suffix to the actual
document title.  The syntax is: ( current-subpage / total-subpages ), an
example is "(4/9)" that indicates the 4th subpage of 9 subpages.
</simpara>

<simpara>
The tab bar by default is only visible when 2 or more tabs are open. It is
divided into slots containing the trimmed title of the tabs' loaded
document.  Between each tab is a separator. The current tab is highlighted
and all tabs that has not been viewed after being loaded are highlighted as
fresh.  Tabs are explained in details in the tabs.txt file.
</simpara>

<simpara>
The status bar has multiple purposes. Most of the time it will contain the
URI (and title) of the currently selected link. If a link is followed,
connection information is shown in the status bar.  When using cursor
routing, the status bar will show the coordinates of the cursor when a link
is not followed.
</simpara>

</section>
<section>
<title>The Main, Link and Tab Menus</title>
<simpara>
The Main Menu gives you access to many of the features of ELinks via
submenus and serves as a good entry point for performing actions on the
different objects of interest, such as links, documents and tabs. The Link
menu and Tab menus are more specialized and targeted to a specific context,
such as link handling or managing the tab bar. Actually, the Link Menu is
accessible from the Main Menu as a submenu.
</simpara>

<simpara>
Once you have familiarized yourself with the menus, you will have a good
chance at gradually learning the most common keybinding, since all the
configured keybindings are shown as right aligned text. Menu entries can
also be quickly accessed using hotkeys. Hotkeys appear highlighted in the
menu entry text. For example the key-combo "Alt-v i" will open the document
info dialog accessible from the View sub menu in the Main menu.
</simpara>

</section>
<section>
<title>The Managers</title>
<simpara>
The managers let you control the state of subsystems, such as cookies and
the global history. They are accessible from the Tools or Setup submenu in
the Main Menu. The managers consists of an area showing a hierarchic listbox
and buttons at the bottom. Below, a view of the cookie manager is shown.
</simpara>

<literallayout class="monospaced">
+------------------------- Cookie manager -------------------------+
|                                                                  |
|   [-]- bugzilla.elinks.or.cz                                     |
|    |    |-- BUGLIST                                              |
|    |    `-- LASTORDER                                            |
|   [+]- kerneltrap.org                                            |
|   [+]-*dictionary.reference.com                                  |
|   [+]-*bjork.com                                                 |
|   [-]- www.google.com                                            |
|         `-- PREF                                                 |
|                                                                  |
|                                                                  |
|                                                                  |
|                                                                  |
|   [ Info ]  [ Add ]  [ Edit ]  [ Delete ]  [ Save ]  [ Close ]   |
+------------------------------------------------------------------+
</literallayout>
<simpara>
Each item is either a folder or a leaf. A folder is displayed with a "[-]"
or "[+]" before the name telling whether the folder is currently open or
closed. Nested items are displayed indented compared to the folder they are
nested in. In the cookie manager example above "bjork.com" is a folder and
"PREF" is a leaf.
</simpara>

<simpara>
Items can be "marked", which makes it possible to select a group of items
and perform an action on them, such as deleting all marked items. If any
item has been marked the currently selected item is ignored when performing
the action.  Marked items are displayed with an asterisk (<emphasis>*</emphasis>) prefixing the
name.
</simpara>

<simpara>
The buttons make it possible to perform actions either on selected or marked
items or on all items in the manager. Buttons named "Clear" and "Save" are
performed on all items; "Clear" will delete all items and "Save" will update
the runtime state file associated with the manager in the ~/.elinks/
directory.  Most buttons presses will query you before completing the
action.
</simpara>

<simpara>
At any time, both the currently selected item and button are highlighted.
The same goes for marked items. Most manager dialogs also maintains the
state, so that when you reopen the manager later it will have the same items
selected and the same folders opened or closed.
</simpara>

<simpara>
The basic default controls for managers are the following:
</simpara>

<informaltable pgwide="0"
frame="topbot"
rowsep="0" colsep="0"
>
<tgroup cols="2">
<colspec colwidth="81pt" align="left"/>
<colspec colwidth="217pt" align="left"/>
<thead>
  <row>
    <entry>
    Keys
    </entry>
    <entry>
    Action
    </entry>
  </row>
</thead>
<tbody>
  <row>
    <entry>
    Up/Down
    </entry>
    <entry>
    Select the item above/below.
    </entry>
  </row>
  <row>
    <entry>
    <emphasis>*</emphasis>
    </entry>
    <entry>
    Toggle marking of a item.
    </entry>
  </row>
  <row>
    <entry>
    Space
    </entry>
    <entry>
    Open and close folders.
    </entry>
  </row>
  <row>
    <entry>
    Left/Right
    </entry>
    <entry>
    Select the button to the left/right.
    </entry>
  </row>
  <row>
    <entry>
    Home/End
    </entry>
    <entry>
    Select the first/last item.
    </entry>
  </row>
  <row>
    <entry>
    Enter
    </entry>
    <entry>
    Press the currently selected button.
    </entry>
  </row>
  <row>
    <entry>
    Esc
    </entry>
    <entry>
    Close the manager dialog.
    </entry>
  </row>
</tbody>
</tgroup>
</informaltable>
<simpara>
Some managers also supports searching, either by pressing the "[ Search ]"
button or by pressing <emphasis>/</emphasis>. By searching the empty string, all hidden items
from the previous search will be shown again.
</simpara>

</section>
<section>
<title>LED status indicators</title>
<simpara>
As an optional feature it is possible to have tiny LED-like status
indicators shown at the bottom-right of the screen. They are used for
displaying an overview of the current browsing state, ie.  whether you are
currently talking through a SSL-secured connection, what is the current
input mode (normal or insert), JavaScript errors etc.
</simpara>

<simpara>
An example display may look like: &#8220;[SIJP&#8212;]&#8221;. Each position in the LED
display is associated with the following state:
</simpara>

<informaltable pgwide="0"
frame="topbot"
rowsep="0" colsep="0"
>
<tgroup cols="2">
<colspec colwidth="81pt" align="left"/>
<colspec colwidth="217pt" align="left"/>
<thead>
  <row>
    <entry>
    Symbol
    </entry>
    <entry>
    Description
    </entry>
  </row>
</thead>
<tbody>
  <row>
    <entry>
    <emphasis>S</emphasis>
    </entry>
    <entry>
    Whether an SSL connection was used.
    </entry>
  </row>
  <row>
    <entry>
    <emphasis>i</emphasis>/<emphasis>I</emphasis>
    </entry>
    <entry>
    The state of insert mode for text-input form-fields: <emphasis>i</emphasis> means modeless, <emphasis>I</emphasis> means insert mode is on.
    </entry>
  </row>
  <row>
    <entry>
    <emphasis>J</emphasis>
    </entry>
    <entry>
    A JavaScript error has occured.
    </entry>
  </row>
  <row>
    <entry>
    <emphasis>P</emphasis>
    </entry>
    <entry>
    A JavaScript pop-up window was blocked.
    </entry>
  </row>
  <row>
    <entry>
    -
    </entry>
    <entry>
    Unused.
    </entry>
  </row>
  <row>
    <entry>
    -
    </entry>
    <entry>
    Unused.
    </entry>
  </row>
</tbody>
</tgroup>
</informaltable>
<simpara>
<emphasis>-</emphasis> generally indicates that the LED is off.
</simpara>

<simpara>
The above information is also available in the LED dialog available by
either clicking on the LED display or via the Help menu.
</simpara>

</section>
<section>
<title>Navigation</title>
<simpara>
ELinks provides various ways to navigate documents. Depending on how
documents are structured, it can be a great help to change navigation style.
The navigation styles can roughly be divided into page-oriented,
link-oriented and screen-oriented. They overlap in many ways, so this
separation is mostly used as a mean to present them.
</simpara>

<section>
<title>Page-Oriented Navigation</title>
<simpara>
This involves scrolling documents horizontally and vertically.  Documents
can be scrolled page-wise, where the next or previous subpage will be
displayed. It is also possible to scroll documents in steps, either
line-wise (vertically) or column-wise (horizontally).  The step size can be
configured and by default is 2 lines and 8 columns. Alternatively, whole
documents can be scrolled to the start or the end.
</simpara>

<simpara>
The basic default controls:
</simpara>

<informaltable pgwide="0"
frame="topbot"
rowsep="0" colsep="0"
>
<tgroup cols="2">
<colspec colwidth="81pt" align="left"/>
<colspec colwidth="217pt" align="left"/>
<thead>
  <row>
    <entry>
    Keys
    </entry>
    <entry>
    Action
    </entry>
  </row>
</thead>
<tbody>
  <row>
    <entry>
    Insert/Delete
    </entry>
    <entry>
    Scroll up/down line-wise. (vertically)
    </entry>
  </row>
  <row>
    <entry>
    PageUp/PageDown
    </entry>
    <entry>
    Scroll up/down page-wise.
    </entry>
  </row>
  <row>
    <entry>
    <emphasis>[</emphasis>/<emphasis>]</emphasis>
    </entry>
    <entry>
    Scroll left/right column-wise. (horizontally)
    </entry>
  </row>
  <row>
    <entry>
    Home/End
    </entry>
    <entry>
    Scroll to the start/end of the document.
    </entry>
  </row>
</tbody>
</tgroup>
</informaltable>
</section>
<section>
<title>Link-Oriented Navigation</title>
<simpara>
For hypertext documents, access to the links makes it more practical to
navigate by jumping between links in the document. There are two ways to do
this; either you can move between links relationally or by number. Using
relational link navigation it is possible to focus the next/previous link or
move in a directional manner to the link in a certain direction such as
left/right/up/down.
</simpara>

<simpara>
In order to navigate using link numbers, you have to first toggle link
numbering on; this will prefix all links with a number using the notation
[number]. "[23]" indicates link number 23. When link numbering is enabled,
pressing any number key will pop up a "Go to link"-dialog where the complete
link number can be entered. By pressing Enter the entered link number will
be focused, but only if it is a valid link number.
</simpara>

<simpara>
Note: it is also possible to jump to links by searching the link text; check
the documentation on searching.
</simpara>

<simpara>
The basic default controls:
</simpara>

<informaltable pgwide="0"
frame="topbot"
rowsep="0" colsep="0"
>
<tgroup cols="2">
<colspec colwidth="81pt" align="left"/>
<colspec colwidth="217pt" align="left"/>
<thead>
  <row>
    <entry>
    Keys
    </entry>
    <entry>
    Action
    </entry>
  </row>
</thead>
<tbody>
  <row>
    <entry>
    Up/Down
    </entry>
    <entry>
    Move to the previous/next link.
    </entry>
  </row>
  <row>
    <entry>
    <emphasis>.</emphasis>
    </entry>
    <entry>
    Toggle link numbering.
    </entry>
  </row>
  <row>
    <entry>
    Enter/Right
    </entry>
    <entry>
    Follow the current focused link.
    </entry>
  </row>
</tbody>
</tgroup>
</informaltable>
<simpara>
No keys are by default configured for directional link navigation.
</simpara>

</section>
<section>
<title>Position-Oriented Navigation</title>
<simpara>
Positional navigation (sorry, bad word) uses the either the position of the
cursor or the mouse click to navigate the document. If you are familiar with
the w3m text-browser you will be familiar with cursor routing. Basically,
you move the cursor around &#8212; kind of like a mouse &#8212; in the document area
of the user interface. When the cursor is over a link, the link is
highlighted, and when the cursor moves outside the current document view, it
will cause the document view to scroll.
</simpara>

<simpara>
The possibilities when using the mouse to navigate the document depend on
what terminal you are using. In some terminals, it is possible to scroll by
using the mouse wheel. Scrolling is however also possible by clicking in the
edge areas of the document view. Highlighting links can be done by clicking
on a link but waiting to release the mouse button until the link is no
longer under the mouse pointer.
</simpara>

<simpara>
No keys are by default configured for cursor routing.
</simpara>

</section>
<section>
<title>Forms</title>
<simpara>
The status bar will indicate the type and name of the field.
</simpara>

<variablelist>
<varlistentry>
<term>
Input text/Password fields
</term>
<listitem>
<simpara>
        These will be displayed as "________".
        Note that passwords will be obscured using "*" characters.
        Status bar will display something like "Text field, name q",
        or "Password field, name password" for password fields.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Textarea boxes
</term>
<listitem>
<simpara>
        These will be displayed as multiple lines consisting of "_".
        Status bar will display something like "Text area, name comment"
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Buttons
</term>
<listitem>
<simpara>
        These will be displayed as "[ Go ]".
        Status bar will display something like "Submit form to &#8230;",
        "Post form to &#8230;" for submit buttons.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Checkboxes
</term>
<listitem>
<simpara>
        These will be displayed as "[ ]" or "[X]".
        Status bar will display something like "Checkbox, name c, value 1".
        To set one just press ENTER on it.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Radio buttons
</term>
<listitem>
<simpara>
        These will be displayed as "( )" or "(X)".
        Status bar will display something like "Radio button, name radio1".
        To set one, you may use ENTER.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Select lists
</term>
<listitem>
<simpara>
        These will be displayed as "[first item____]".
        Note that if multiple attribute is used, these are displayed as a
        group of checkboxes instead.
        Status bar will display something like "Select field, name list"
        To select one entry, press ENTER, then navigate using UP/DOWN, then
        press ENTER again.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section>
<title>Searching</title>
<simpara>
Searching is by default available by pressing <emphasis>/</emphasis>. This will open a search
dialog with a input text field for entering the search terms and checkboxes
to control how searching is performed. You can indicate whether matching
should be case sensitive and whether regular expressions or normal searching
should be used.
</simpara>

<simpara>
It is also possible to make an incremental search, also called type-ahead
searching. You can search either the whole document text or only link text.
The latter can be useful if you see a link deep inside a page and want to
get to it quickly.
</simpara>

<simpara>
Matches of the search term will be high-lighted. After having performed
document text search all matches will be high-lighted.  To get rid of this
high-lighting you have to &#8220;search for the empty string&#8221;, that is open a
search dialog and just press Enter in the input field.
</simpara>

<simpara>
Previous search words are saved in the search history, so they can easily b
found and used later. Browsing the history will replace the current entered
search terms.
</simpara>

<simpara>
The basic default controls for searching are the following:
</simpara>

<informaltable pgwide="0"
frame="topbot"
rowsep="0" colsep="0"
>
<tgroup cols="2">
<colspec colwidth="81pt" align="left"/>
<colspec colwidth="217pt" align="left"/>
<thead>
  <row>
    <entry>
    Keys
    </entry>
    <entry>
    Action
    </entry>
  </row>
</thead>
<tbody>
  <row>
    <entry>
    <emphasis>/</emphasis>
    </entry>
    <entry>
    Open search dialog
    </entry>
  </row>
  <row>
    <entry>
    <emphasis>?</emphasis>
    </entry>
    <entry>
    Open search dialog for backwards searching
    </entry>
  </row>
  <row>
    <entry>
    <emphasis>#</emphasis>
    </entry>
    <entry>
    Start incremental link text search
    </entry>
  </row>
  <row>
    <entry>
    <emphasis>#/</emphasis>
    </entry>
    <entry>
    Start incremental document search
    </entry>
  </row>
  <row>
    <entry>
    <emphasis>n</emphasis>/<emphasis>N</emphasis>
    </entry>
    <entry>
    Show next/previous match
    </entry>
  </row>
  <row>
    <entry>
    Tab
    </entry>
    <entry>
    Show next match (only for incremental searching)
    </entry>
  </row>
  <row>
    <entry>
    Up/Down
    </entry>
    <entry>
    Insert previous/next search word from history (only when the input field is selected)
    </entry>
  </row>
</tbody>
</tgroup>
</informaltable>
</section>
<section>
<title>Hints and Odd Features</title>
<simpara>
Note: This is still a work in progress and from here on an below
everything is marked TODO!
</simpara>

<itemizedlist>
<listitem>
<simpara>
Numerical action prefixes. Example: 3&lt;Down&gt; jumps down three links.
</simpara>
</listitem>
<listitem>
<simpara>
How to move forward in the document history (<emphasis>u</emphasis>).
</simpara>
</listitem>
<listitem>
<simpara>
Toggling color modes, plain/html and image link rendering.
</simpara>
</listitem>
<listitem>
<simpara>
Link numbering.
</simpara>
</listitem>
<listitem>
<simpara>
Insert mode in text-input form-fields.
</simpara>
</listitem>
<listitem>
<simpara>
Menu searching.
</simpara>
</listitem>
</itemizedlist>
</section>
</chapter>
<chapter>
<title>The Ultimate Bookmarks Guide</title>
<simpara>
Glad to see you again, mortal. Now, we are going to learn about bookmarks -
how to use them, how to maintain them, and also something more about the file
formats and maybe even about the code structure later. But don't fear, we
won't burden you with it, just stop reading when you already know enough.
</simpara>

<simpara>
In order to read this, you need some common sense, the ability to start ELinks
and some idea about what's a Web document, a URL address and knowledge like
that.
</simpara>

<simpara>
If we ever mention some keys here, please note that you can rebind almost any
action to another key which you like more - then you must obviously imagine
your own key in place of that. Below, we will list all actions, options and so
on related to bookmarks. We won't tell you how to rebind the keys, though;
another document will take on that.
</simpara>

<simpara>
Somewhat out-of-order, a very frequent FAQ: In order to move bookmarks around,
you need to mark them first - press Insert or <emphasis>*</emphasis> (if you use the default
keymap) to do that.
</simpara>

<section>
<title>The Bookmark Manager</title>
<simpara>
Basically, almost everything is going on in the so-called bookmark manager.
That's a special dialog window, which contains a listing of all the bookmarks
you ever told ELinks to remember and it lets you to do with them anything you
would ever want to do with them.
</simpara>

<simpara>
You launch the bookmark manager by pressing the <emphasis>s</emphasis> key in standby (standard)
mode. You should see a big empty space (bookmarks will slowly appear there as
you will add them) and couple of buttons shriveling at the bottom. So, as a
start, move with the right (or left; both will do) arrow to the button "Add
bookmark" and fill in the input fields it offers to you. I mean, you can type
something like "ELinks homepage" to the first field, then move down by e.g.
the down arrow and fill "http://elinks.or.cz/" to the second field. Then,
bravely press enter and watch the bookmark popping up at the top of the vast
area reserved for bookmarks.
</simpara>

<simpara>
Repeat this step few times. Now, you can move between bookmarks by the up and
down arrow, jump to the location any of them points to by the Goto button,
change it by the Edit button, delete it with the Delete button and so on. When
you'll become bored, press the escape button and you're free again!
</simpara>

</section>
<section>
<title>The Ancient Forests</title>
<simpara>
It's not very convenient to have all the bookmarks mixed up - soon, you will
get lost in them. Thus, in ELinks you can categorize them to various folders,
subfolders, subsubfolders and so on, then you can expand and back enfold them
and so on.
</simpara>

<simpara>
In order to create your first folder, use the button "Add folder" and fill the
first input field. You can safely ignore the URL field, ELinks will do the
same. <emphasis role="strong">POOF</emphasis> and you see it - it has that strange [+] or [-] thing there. If
it has [+] near, it's enfolded, while when it has [-] near, it is expanded,
while you can change that by pressing the spacebar.
</simpara>

<simpara>
In order to add a bookmark into a folder, move on the item of the folder (it
must be expanded) or onto any bookmark inside of the folder and simply do the
usual "Add bookmark" job. You can also move the bookmarks around, obviously.
You need to first mark all the bookmarks (or even folders) you want to move
using the Insert or <emphasis>*</emphasis> key&#8212;asterisk will appear near of all marked
bookmarks&#8212;and then move to where you want to have the stuff moved to, and
press the "Move" button.
</simpara>

<simpara>
Separators can be inserted as well, using "Add separator" button, or by
entering a special bookmark with "-" as title and no url.
</simpara>

</section>
<section>
<title>Searching needle in the haycock</title>
<simpara>
Of course, you can search in the bookmarks. Just use the "Find" button  - for
convenience, you have the current document's URL and title pre-filled there,
and for convenience only up-up-enter-down-down sequence is enough to have the
playground clean. Then, just fill a substring of what you are looking for, and
the bookmarks will be filtered so that only the matching ones are shown.
(Actually, currently it will not be filtered but the cursor will only jump to
the first matching bookmark below the current cursor position - and it will
NOT wrap around. The exact behaviour changes time by time and hasn't been
stabilized yet.)
</simpara>

</section>
<section>
<title>File formats</title>
<simpara>
ELinks supports two bookmark formats: the native format and a generic bookmark
exchange format called XBEL. Each of those formats has its pros and cons,
which we shall discuss below. You can switch between then by changing the
option bookmarks.file_format.
</simpara>

<simpara>
However, first please note that ELinks CANNOT read Links bookmarks directly.
Importing Links-0.9x (or Links-1.x) bookmarks is easy - it is just matter of
changing all the <emphasis>|</emphasis> (pipe) characters to tabs.  There is a script for that in
the contrib/conv/ directory. Importing Links-2.xx bookmarks is not so easy; in
fact, the scribe knows of no way of doing that at the time of writing this, so
this is up to you to figure out (if you do, please tell us so that we can add
it here).  Perhaps you might find a way to convert Links2 bookmarks to the
XBEL format, which can then be loaded in ELinks.
</simpara>

<section>
<title>Native file format</title>
<simpara>
This is the preferred bookmarks format, which is also used by default.  The
bookmarks file is ~/.elinks/bookmarks, in a simple format:
</simpara>

<literallayout class="monospaced">
&lt;name&gt; '\t' &lt;url&gt; [ '\t' &lt;depth&gt; ['\t' &lt;flags&gt;] ] '\n'
</literallayout>
<simpara>
<emphasis>\t</emphasis> represents a tab character, <emphasis>\n</emphasis> represents a newline character.  [Square
brackets] denote optional parts. The &lt;name&gt; and &lt;url&gt; fields
should be obvious.  &lt;depth&gt; contains the depth level of the entry - by
that, ELinks can unambiguously figure out the bookmarks hierarchy:
</simpara>

<literallayout class="monospaced">
Bookmarks structure:                                Depth:
 ,-- The Pasky's C Bestiary                         0
[-]- Wonderful things                               0
 |    |-- Christmas Carol in l33tsp34k by L.M.      1
 |   [-]- Beautiful Potato Camera Shots             1
 |   [-]- Gallery of Scary Images of Jonas Fonseca  1
 |         |-- Jonas torturing gdb                  2
 |        [-]- Urgh                                 2
 |         |    `-- Jonas consuming Tofu            3
 |         `-- Jonas with crashed ELinks            2
 |-- Slides from Witek's hack-patch show            0
 `-- Miciah's English Grammar Spellbook             0
</literallayout>
<simpara>
&lt;flags&gt; is a string of characters. Currently, two flags are supported:
</simpara>

<informaltable pgwide="0"
frame="topbot"
rowsep="0" colsep="0"
>
<tgroup cols="2">
<colspec colwidth="43pt" align="left"/>
<colspec colwidth="255pt" align="left"/>
<thead>
  <row>
    <entry>
    Flag
    </entry>
    <entry>
    Description
    </entry>
  </row>
</thead>
<tbody>
  <row>
    <entry>
    E
    </entry>
    <entry>
    This folder is currently expanded. (No effect for non-folders.)
    </entry>
  </row>
  <row>
    <entry>
    F
    </entry>
    <entry>
    This entry is a folder. The &lt;url&gt; part is usually empty.
    </entry>
  </row>
</tbody>
</tgroup>
</informaltable>
<simpara>
Separators: these are special bookmarks with "-" as title and no url.
</simpara>

<variablelist>
<varlistentry>
<term>
Pros
</term>
<listitem>
<simpara>
        Naturally, ELinks handles the native format the best, easiest and most
        reliably.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Cons
</term>
<listitem>
<simpara>
        It is unlikely that you could use the native format anywhere else than
        in ELinks.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>
To use the native format, set bookmarks.file_format = 0.
</simpara>

</section>
<section>
<title>XBEL file format</title>
<simpara>
The XBEL file format support was added at some point during the 0.4
development by Fabio Boneli. It has never been complete and has plenty of
troubles, but generally, it works at the basic level. The bookmarks file is
~/.elinks/bookmarks.xbel (thanks to a different filename, you can have both
XBEL and native bookmarks saved in your ~/.elinks directory).
</simpara>

<simpara>
We shall not describe the XBEL file format here,
</simpara>

<literallayout class="monospaced">
http://pyxml.sourceforge.net/topics/xbel/
</literallayout>
<simpara>
is the authoritative resource on that. It also contains list of some of the
applications supporting the format.  Basically, you will be probably able to
convert from/to the XBEL format to/from most of the other widely used formats,
so this way you can import your bookmarks to ELinks from basically anything.
</simpara>

<variablelist>
<varlistentry>
<term>
Pros
</term>
<listitem>
<simpara>
        XBEL is the gateway to the rest of the bookmarks world.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
Cons
</term>
<listitem>
<simpara>
        The support for XBEL is incomplete and there are known bugs.
        Especially, national character sets are basically not supported, so
        ELinks will most likely get it wrong if you have any non-ASCII
        characters in your bookmarks.  Generally, the XBEL support should be
        considered experimental and you shouldn't rely on it. It <emphasis role="strong">could</emphasis> trash
        your XBEL bookmarks file so make regular backups.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>
To use the XBEL format, set bookmarks.file_format = 1.
</simpara>

</section>
<section>
<title>Usage hints</title>
<simpara>
As already noted above, probably the best usage pattern is to use XBEL for
importing/exporting your bookmarks to/from ELinks and the native format for
regular operation. Of course, if you want to synchronize your bookmarks in
ELinks and some other XBEL-supporting gadget and you are brave, you can use
XBEL as your exclusive bookmark format - the choice is upon you.
</simpara>

<simpara>
Regarding the bookmarks synchronization, there is one important note. ELinks
saves your bookmarks each time you added one through the <emphasis>a</emphasis> shortcut
(add-bookmark action) or when closing the bookmarks manager if you made any
changes or when quitting ELinks. However, ELinks reads your bookmarks only
_ONCE_, during the startup. This behaviour may change in the future (tell us
if you need a way for ELinks to re-read the bookmarks file), but this is how
it is done now.
</simpara>

<simpara>
Actually, you may now ask "So how do I convert bookmarks between the two
formats?".  It is quite easy.  ELinks simply follows the current value of
bookmarks.file_format whenever loading/saving the bookmarks.
</simpara>

<simpara>
So, e.g. if you normally use the native format but you want the bookmarks to
be saved in the XBEL format once, change bookmarks.file_format to 1, then
cause the bookmarks to be resaved (e.g. by doing some simple change, like
adding a trailing space to some bookmark's title or so), then change the
bookmarks.file_format value back to 0.
</simpara>

<simpara>
It is a little more complicated if you normally use the native format but you
want to import bookmarks from the XBEL format once. You again change
bookmarks.file_format to 1, then cause the bookmarks to be reloaded.  That
involves saving the configuration, quitting ELinks _completely_ (that means
closing/killing all instances of it you have running), then restarting it and
changing bookmarks.file_format to 0. Then save the configuration again and
cause ELinks to resave the bookmarks.
</simpara>

<simpara>
Agreed, this all strange dances are quite clumsy, likely some simple
wizard-like interface for switching the bookmarks formats will be introduced
in the future. So far, we have had no reports from our users that anyone wants
to switch their bookmarks format frequently, so this is not too high on our
TODO list. So be sure to tell us if you would like this process to be
simplified rather sooner than later.
</simpara>

</section>
</section>
</chapter>
<chapter>
<title>The Wonders of Tabbed Browsing</title>
<simpara>
In this information age with our stream of consciousness constantly being
dispersed by links to different resources on the Net, it is a challenge to
keep track of where you are going. The need for being able access several
pages in parallel arises. Tabbed browsing gives you an easy way to browse
multiple sites in parallel.
</simpara>

<simpara>
If you are not already familiar with the concept of tabbed browsing you can
think of a tab as a separate browsing context with its own history and the
various other browsing state information, like search word and document
loading.  Whenever you stumble upon a link to a document that you want to
follow without leaving the current document, you can open it in a new tab.
This makes it possible to more easily jump between pages on the Net and
removes the need for running more than one ELinks to do that.
</simpara>

<simpara>
Options related to tabs are located under &#8220;User Interface -&gt; Window Tabs&#8221; in
the option manager. In the configuration file the naming prefix is
&#8220;ui.tabs&#8221;.
</simpara>

<simpara>
Tabbed browsing has been supported since version 0.9.0 and is fairly complete.
The documentation on tabs is therefore divided into two chapters: a general
introduction and an introduction to advanced topics.
</simpara>

<section>
<title>Introduction to the basic actions involving tabs</title>
<section>
<title>The tab bar and the tab menu</title>
<simpara>
The current state of all opened tabs are displayed in the tab bar. The tab bar
will by default become visible when more than one tab is open, but this is
configurable. For each open tab, the document title will be shown, possibly
truncated. The current tab is highlighted. The tab bar will also display a
load meter for tabs that are loading documents. Finally, any tab that has not
been selected since its document was loaded will be marked as &#8220;fresh&#8221; by
using a different coloring scheme.
</simpara>

<simpara>
The tab menu gives access to tab specific actions along with some other useful
document specific actions. So even if you haven't configured keybindings for
all actions, chances are you will find it in the tab menu. It is by default
opened by pressing <emphasis>e</emphasis>.
</simpara>

</section>
<section>
<title>Creating new tabs</title>
<simpara>
When creating new tabs, it is possible to specify whether to create the tab
and make it the current active tab or if the tab is to be created &#8220;in the
background&#8221;&#8212;that is, without it taking over the focus.
</simpara>

<simpara>
Tabs can be created either with or without specifying a desired first document
to load. That is, you can open links or submitted forms in a new tab or just
open a new tab. Depending on your configuration, the latter will load the
configured homepage in the newly created tab or simply leave the tab blank
with no loaded document.
</simpara>

<simpara>
By default, <emphasis>t</emphasis> will open a new tab and <emphasis>T</emphasis> will open the current link in a
new backgrounded tab. You can configure keybindings for opening a new tab in
the background and opening the current link as the active tab.
</simpara>

</section>
<section>
<title>Switching between tabs</title>
<simpara>
By default, it is possible to switch between tabs by using <emphasis>&lt;</emphasis> and <emphasis>&gt;</emphasis> to
select the previous and next tab. When currently positioned at the leftmost
tab and switching to the previous tab the switching between tabs will perform
a wrap-around so that the rightmost tab will be selected. The wrap-around
behaviour is configurable.
</simpara>

</section>
<section>
<title>Closing tabs</title>
<simpara>
Tabs can by default be closed by pressing <emphasis>c</emphasis>. It is possible to optionally
have a confirmation dialog pop up when closing a tab to avoid accidental
closing. To complement closing of the current tab, it is also possible to
close all tabs but the current one. No key is by default configured for this;
the tab menu, however, provides this ability.
</simpara>

<simpara>
Note: downloads initiated from a tab are in no way tied to that tab, so tabs
can be closed while the download will be unaffected.
</simpara>

</section>
</section>
<section>
<title>Advanced topics involving tabs</title>
<section>
<title>Moving tabs</title>
<simpara>
Newly created tabs are always positioned as the rightmost tab, but it is
possible to move the current tab either to the left or the right.  The default
keybindings have them bound to Alt-&lt; and Alt-&gt;. Note, however, that there are
problems recognizing those keybindings when using XTerm, so you might want to
rebind them.
</simpara>

</section>
<section>
<title>Saving and restoring tabs</title>
<simpara>
Several features use bookmarks to save tabs; they will create a folder and
bookmark therein the currently displayed document of each tab:
</simpara>

<itemizedlist>
<listitem>
<simpara>
You can explicitly command all tabs to be bookmarked. This will ask you for
  a folder name in which the tabs will be bookmarked.
</simpara>
</listitem>
<listitem>
<simpara>
At startup and shutdown tabs can automatically be bookmarked in order to
  save and restore the browsing state. Note that when restoring, all history
  information will be gone. It is possible to configure both tab saving and
  restoring via options in &#8220;UI -&gt; Sessions&#8221;.
</simpara>
</listitem>
<listitem>
<simpara>
As a mean of crash protection, tabs can periodically be saved so that it is
  later possible to reconstruct opened tabs. In case of a clean shutdown
  periodically saved tabs will be removed.
</simpara>
</listitem>
</itemizedlist>
</section>
</section>
</chapter>
<chapter>
<title>Marks (the lite edition)</title>
<simpara>
So, were you ever reading this huge 300-pages specification heavily
cross-referencing itself, jumping around and getting a headache when looking
for the place where you stopped reading the last time?
</simpara>

<simpara>
Were you doing something similar in C code, but praising <emphasis role="strong">vi</emphasis> for document
marks?
</simpara>

<simpara>
ELinks can do them, too! For vim non-users:
</simpara>

<section>
<title>What it is?</title>
<simpara>
When you place a "document mark" (just "mark" from now on), you place an
_invisible_ anchor at the current position in the document. You can place
several such marks --- each mark is identified by a single character (any
reasonable character will do). Then, you can just happily browse around
aimlessly (but see below) and when in the same document again, you can
return to any of the marks in the file again. That will restore your
position in the file at the time of placing the mark.
</simpara>

<simpara>
You can place a mark by the "m" key followed by the mark character. You can
go to a mark by the "'" (apostrophe) key followed by the mark character.
E.g., you can place a mark named "a" in the file by pressing "ma", then
return to it anytime later by typing "'a". You can of course change those
shortcuts at any time to anything you wish in the keybindings manager.
</simpara>

<simpara>
Short summary: you can place a mark (e.g. <emphasis>z</emphasis>) in a document by pressing
"mz" and then go back to it anytime later by pressing "'z".
</simpara>

</section>
<section>
<title>Restrictions</title>
<simpara>
To make a good start, one non-restriction comes first. The document marks
are local to the document. That means you can have a mark "x" in one
document and another mark "x" in another document and ELinks won't mind and
it will get it right each time.
</simpara>

<simpara>
Now for the restrictions. ALL the document marks are always local to the
document. I.e. the vim text editor has an extension that makes the
capital-letter marks to be global to the whole program and going to such a
mark will make it to open the right document. This is not implemented in
ELinks _yet_.
</simpara>

<simpara>
Contrary to vim, ELinks doesn't support numbered marks (jumping to the last
n documents in history) nor the special "'" mark (jumping to the last mark).
Yet.
</simpara>

<simpara>
There is no way to get a listing of all marks set in a document.  Yet.
</simpara>

</section>
<section>
<title>Marks lifespan</title>
<simpara>
I already hinted something about another restriction regarding aimless
browsing. The lifespan of document marks depends on rather ill-defined and
(for an average mortal) mostly non-deterministic technical conditions.
</simpara>

<simpara>
Generally, marks _always_ survive when not moving away from the document or
when moving only in the session history (and unhistory). That means, if you
go back and the "unback" to the document, you will find your marks safely in
place. If you follow a link from the document (or typed an address to the
Goto URL dialog) and then go back (by pressing the right arrow or through
the File menu), your marks are safe too. These are in fact by far the most
common usage cases for the marks, so most of the time it will just work as
you expect.  That's a good news.
</simpara>

<simpara>
The bad news is that in all other cases, nothing is guaranteed.  It might
work if you get back to the document by any other means (by following some
link or typing its address to the Goto URL dialog), or it might not. It
might be possible to achieve two instances of the document inside a single
ELinks, each with its own set of marks. However, again, generally it will
work as expected - this paragraph serves only as a disclaimer in cases it
doesn't.  Don't rely on it.
</simpara>

<simpara>
Marks never survive over ELinks restarts. If you quit your ELinks completely
and run it again, the marks you placed will be no more. No exceptions. Well.
In some cases, it <emphasis role="strong">might</emphasis> appear that they survived, but that just means you
did not quit your ELinks _completely_ --- if you run multiple ELinks
instances under a single user on a single system, they "join" together and
you must quit (or kill) them all to get rid of the damn thing.  But that's a
different story.
</simpara>

</section>
</chapter>
<chapter>
<title>URL Shortcuts in ELinks</title>
<simpara>
One extremely useful and convenient feature on ELinks which is presumably not
very well known is so-called URL rewriting. If you give ELinks a URL (by
passing it on the command line, through the -remote magic device or most
frequently by typing it to the Goto URL dialog), it can mangle it in certain
ways before processing it.  This mangling is called URI rewriting.
</simpara>

<section>
<title>What it does</title>
<simpara>
The URI rewriting can expand certain URL shortcuts to complete URLs. For
example, if you type <emphasis>sd</emphasis> to the Goto URL dialog, it will get rewritten to
</simpara>

<literallayout class="monospaced">
http://www.slashdot.org/
</literallayout>
<simpara>
first, then loaded --- /.'s front page will be displayed.
</simpara>

<simpara>
More so, if you type <emphasis>g elinks</emphasis> to the Goto URL dialog, it will be rewritten
to
</simpara>

<literallayout class="monospaced">
http://www.google.com/search?q=elinks&amp;amp;btnG=Google+Search
</literallayout>
<simpara>
and then loaded --- therefore, a Google search for the <emphasis>elinks</emphasis> keyword will
ensue. Note that you can separate the <emphasis>g</emphasis> by either a space or a colon, so
<emphasis>g:elinks</emphasis> will do the exact same thing.
</simpara>

<simpara>
A large number of those shortcuts is already predefined. You can browse the
Protocols :: URI Rewriting :: Dumb/Smart prefixes in the Options Manager for
complete listing of already defined shortcuts (press the [Info] button on a
shortcut to see what it gets rewritten to). See below for details on how to
enable/disable this rewriting and how to define own shortcuts.
</simpara>

</section>
<section>
<title>How it works</title>
<simpara>
All the URI rewriting can be controlled by options in the <emphasis>protocol.rewrite</emphasis>
options tree.
</simpara>

<simpara>
In the <emphasis>sd</emphasis> case, URI rewriting mechanism called <emphasis>dumb prefix</emphasis> is used.  If
protocol.rewrite.enable-dumb is true, ELinks looks at the contents of
protocol.rewrite.dumb tree, and if it finds option protocol.rewrite.dumb.sd,
it will use its value as the target URI.
</simpara>

<simpara>
Therefore, in the general way, if ELinks looks at
protocol.rewrite.dumb.&amp;lt;typed_string&amp;gt; and if it exists, it replaces the
URI with it. These dumb prefixes can be used as kind of alternative bookmarks
- if you want to have a fast access to a certain site and you don't want to
spend lengthy seconds navigating in the bookmarks manager, you can just fire
up the Goto URL dialog, type the shortcut and there you go.
</simpara>

<simpara>
A dumb prefix can contain <emphasis>%c</emphasis>, which will be replaced by the URI of the
current document. This is used, for example, in the <emphasis>arc</emphasis> dumb-prefix, which
provides a shortcut to the Wayback machine at archive.org.
</simpara>

<simpara>
In the <emphasis>g</emphasis> case, a slightly different URI rewriting mechanism called <emphasis>smart
prefixes</emphasis> is used. If protocol.rewrite.enable-smart is true, ELinks looks at
the contents of protocol.rewrite.smart tree and if it finds option
protocol.rewrite.smart.g, it will use its value as the target URI.
</simpara>

<simpara>
The difference is that the smart prefixes can take arguments and reference
them in the target URI. As with dumb prefixes, <emphasis>%c</emphasis> in the URI means the
current address. Additionally, <emphasis>%s</emphasis> will be substituted by the whole string
following the prefix (<emphasis>elinks</emphasis> in the <emphasis>g</emphasis> example above; <emphasis>%s</emphasis> is by far the
most frequently used expansion), while you can reference individual
space-separated arguments with the codes <emphasis>%0</emphasis> thru <emphasis>%9</emphasis>.  Finally, if you want
a plain % to the resulting URI, use <emphasis>%%</emphasis>.
</simpara>

<simpara>
Note that the prefix searched in the protocol.rewrite.smart tree is everything
in the typed address up to the first space or colon (so <emphasis>bug:123</emphasis> and <emphasis>bug
123</emphasis> make no difference). These prefixes are generally useful for searching
anything very fast - be it Google (<emphasis>g:foo</emphasis>, <emphasis>gi:foo</emphasis>, <emphasis>gr:foo</emphasis>, &#8230;), ELinks
Bugzilla bugs (<emphasis>bug:1234</emphasis>), RFC database (<emphasis>cr:foo</emphasis>), or Czech-English
dictionary (<emphasis>czen:foo</emphasis>). But only your imagination is the limit.
</simpara>

</section>
<section>
<title>Alternative URI rewriting mechanisms</title>
<simpara>
In the past before this was implemented, Lua scripting did the job. And you
still have complete control over the URI in the internal scripting goto-url
hook. The advantages are clear - you get complete control over the URI and you
can do much more interesting things with it (e.g., there is some very advanced
CVSweb and Debian packages database URIs prefixes support in the sample Lua
hooks file). One disadvantage is clear too - you must have Lua scripting
enabled in order to make use of this, and many users don't have Lua installed.
Another hidden disadvantage is that the goto-url hook is not triggered all the
times when the built-in URI rewriting has its say on the URL.  Specifically,
the goto-url hook isn't triggered when the URL is passed on the command line.
</simpara>

</section>
</chapter>
<chapter>
<title>The Terminal Setup</title>
<simpara>
ELinks uses neither (n)curses nor termcap/terminfo, so unless you are using a
terminal that is known by ELinks and have a built-in configuration (see below
for a list), it might be required that you do a little configuring of how your
terminal should be handled. The easiest way to do this is using the Terminal
Options dialog located in the Setup submenu of the Main menu.
</simpara>

<simpara>
It is possible to have configurations for multiple terminals as long as the
TERM environment variable &#8212; used to distinguish terminals from one another &#8212;
is set to something different for each terminal. So be sure to set TERM to
different values for two terminals that cannot share the same configuration.
For example, always setting TERM to xterm-color can lead to problems if you
run ELinks under the Linux console. This is because the Linux console does not
support underlining and ELinks will not know that underlined characters will
have to be color highlighted so they stand out.
</simpara>

<simpara>
In short, ELinks does not use termcap or terminfo. ELinks uses $TERM, but only
to distinguish between terminals in its own configuration. That is, you need
only configure your terminal within ELinks: Go to the Setup menu and select
Terminal Options.  If $TERM is set to <emphasis>screen</emphasis> when you configure ELinks'
terminal settings, ELinks will remember to use those settings when $TERM is
<emphasis>screen</emphasis>.
</simpara>

<section>
<title>Options</title>
<simpara>
Apart from the last charset option configurable through the Setup -&gt; Character
Set submenu in the Main menu, the rest can be configured using the Terminal
Options dialog.
</simpara>

<section>
<title>Terminal type</title>
<simpara>
It maps roughly to the terminal type, such as Linux console, XTerm, VT100 etc.
It matters mostly when drawing frames and borders around dialog windows. As
already mentioned, it also turns on certain features which try to compensate
for &#8220;missing&#8221; terminal capabilities when drawing. Special highlighting of
underlined text if underlining is not supported is one such thing.
</simpara>

<informaltable pgwide="0"
frame="topbot"
rowsep="0" colsep="0"
>
<tgroup cols="1">
<colspec colwidth="5pt" align="left"/>
<thead>
  <row>
    <entry>
    Type                    Notes
    </entry>
  </row>
</thead>
<tbody>
  <row>
    <entry>
    No frames               Dumb terminal type / ASCII art
    </entry>
  </row>
  <row>
    <entry>
    VT 100 frames           Works in most terminals
    </entry>
  </row>
  <row>
    <entry>
    Linux or OS/2 frames    Linux console / you get double frames and other goodies
    </entry>
  </row>
  <row>
    <entry>
    KOI-8
    </entry>
  </row>
  <row>
    <entry>
    FreeBSD                 FreeBSD console
    </entry>
  </row>
</tbody>
</tgroup>
</informaltable>
<simpara>
The default is to assume dumb terminal/ASCII art.
</simpara>

</section>
<section>
<title>Color mode</title>
<simpara>
The color mode controls what colors are used and how they are output to the
terminal. The available color modes are:
</simpara>

<informaltable pgwide="0"
frame="topbot"
rowsep="0" colsep="0"
>
<tgroup cols="1">
<colspec colwidth="5pt" align="left"/>
<thead>
  <row>
    <entry>
    Mode                    Color codes
    </entry>
  </row>
</thead>
<tbody>
  <row>
    <entry>
    Mono mode               Only 2 colors are used
    </entry>
  </row>
  <row>
    <entry>
    16 color mode           Uses the common ANSI colors
    </entry>
  </row>
  <row>
    <entry>
    256 color mode          Uses XTerm RGB codes (if compiled in)
    </entry>
  </row>
</tbody>
</tgroup>
</informaltable>
<simpara>
The default is to use mono mode.
</simpara>

</section>
<section>
<title>Switch fonts for line drawing (aka 11m hack)</title>
<simpara>
This is related to the drawing of frames and window borders controlled by the
option above. It controls whether to switch fonts when drawing lines, enabling
both local characters and lines working at the same time.
</simpara>

<simpara>
This boolean option only makes sense with the Linux terminal.  Off by default.
</simpara>

</section>
<section>
<title>Restrict frames in cp850/852</title>
<simpara>
This is related to the drawing of frames and window borders controlled by the
option above. If enabled, it restricts the characters used when drawing lines.
</simpara>

<simpara>
This boolean option only makes sense with the Linux terminals using the
cp850/852 character sets. Off by default.
</simpara>

</section>
<section>
<title>Block cursor</title>
<simpara>
Move cursor to bottom right corner when done drawing if possible. This is
particularly useful when we have a block cursor, so that text colors are
displayed correctly. If you are using a screen reader you do not want to
enable it since the cursor is strategically positioned near relevant text of
selected dialog elements.
</simpara>

<simpara>
This boolean option is off by default.
</simpara>

</section>
<section>
<title>Transparency</title>
<simpara>
Whether to set the background to black. This is particularly useful when using
a terminal (typically in some windowing environment) with a background image
or a transparent background. If this option is enabled the background will be
visible in ELinks as well.
</simpara>

<simpara>
Note that this boolean option makes sense only when colors are enabled. On by
default.
</simpara>

</section>
<section>
<title>Text underlining capability</title>
<simpara>
This boolean option controls whether to underline text or enhance the color
instead.
</simpara>

<simpara>
Note: not all terminals support text underlining, so it is off by default.
</simpara>

</section>
<section>
<title>UTF-8 I/O</title>
<simpara>
This boolean option controls outputting of I/O in UTF-8 for Unicode terminals.
</simpara>

<simpara>
Note that currently, only the subset of UTF-8 according to the terminal
codepage is used. Off by default.
</simpara>

</section>
<section>
<title>Character Set</title>
<simpara>
Codepage of the charset used for displaying content on terminal.
</simpara>

<simpara>
The value <emphasis>System</emphasis> (which is the default) will set the charset according to
the current locale. The default is to use the charset of the current locale.
</simpara>

</section>
</section>
<section>
<title>Terminal Configurations</title>
<simpara>
Built-in configurations exists for the following terminals:
</simpara>

<itemizedlist>
<listitem>
<simpara>
linux
</simpara>
</listitem>
<listitem>
<simpara>
vt100
</simpara>
</listitem>
<listitem>
<simpara>
vt110
</simpara>
</listitem>
<listitem>
<simpara>
xterm
</simpara>
</listitem>
<listitem>
<simpara>
xterm-color
</simpara>
</listitem>
<listitem>
<simpara>
xterm-256color
</simpara>
</listitem>
</itemizedlist>
<simpara>
The last configuration requires that support for 256 is compiled in.
</simpara>

<simpara>
GNU Screen is VT100-compatible, so select <emphasis>VT 100 frames</emphasis>. GNU Screen also
supports colors just fine, so select <emphasis>16 colors</emphasis>; or if you are running Screen
within a terminal emulator that supports 256 colors and you have compiled both
Screen and ELinks to support it, choose <emphasis>256 colors</emphasis>.
</simpara>

</section>
</chapter>
<chapter>
<title>Introduction to MIME handling</title>
<simpara>
At some time along the 0.4 prereleases, ELinks replaced the old Links file
configuration system with its own one. Now, the configuration is stored in
elinks.conf, much more complete and featuring a new syntax. You can set most
options from the UI (so usually there is no need to deal with elinks.conf),
and that used to be true for setting MIME handlers and extensions as well; but
now the associations menu is gone temporarily, forcing you to set the handlers
from the configuration file.
</simpara>

<simpara>
The comments provided within elinks.conf for the MIME options are not much
helpful, and those options may seem a bit obscure or confusing at first.  This
document is a basic introduction to setting of MIME associations for ELinks.
If you want to know how to automatically launch a program to view some kind of
file (like images), then read on. Some basic knowledge of MIME is recommended.
</simpara>

<section>
<title>Handling MIME types, the ELinks way</title>
<section>
<title>What are MIME types and why may you want to use them?</title>
<simpara>
If, while browsing with ELinks, you need to display files that it can't show
(like images or PDF documents), then you will likely want to pass them to
other programs that are suitable for this task. While you may do it manually
(saving the file to disk, running the auxiliary program to show it and then
removing the file when finished), ELinks provides a method to do this
automatically using MIME types.
</simpara>

<simpara>
ELinks usually knows what the MIME type is for any file (which is a kind of
description of its format), thus you only need to specify how to manage the
MIME types for the files you want to open. If you don't tell ELinks how to
manage a given MIME type then it will show you on screen the contents of the
file (as if it was ASCII text) instead of calling an external program to show
them.
</simpara>

</section>
<section>
<title>Associating files to MIME types</title>
<simpara>
If the file is fetched from a web server then this web server should tell
ELinks what its MIME type is, so you should have generally no need to care
about it. However, the web server might send an incorrect type, or you may be
retrieving it by FTP or from your local filesystem, so sometimes ELinks needs
to guess it.
</simpara>

<simpara>
The easiest method to guess a MIME type for a file is to just look at its name
trusting it was given the right extension.  ELinks supports this, letting you
to specify a type for any given extension.
</simpara>

</section>
<section>
<title>Managing a given MIME type</title>
<simpara>
This usually means specifying programs to open files of this type and the
conditions in which those programs may be used. For instance, you may want to
use zgv (a popular svgalib image viewer) when you are using the text console,
but xli (a image viewer for X) when running the X window system.
</simpara>

<section>
<title>Binding it to a handler</title>
<simpara>
Instead of directly attaching a program to a MIME type, ELinks lets you
associate an abstract handler to each type. Then you can specify which
programs implement the handler and how are they used.
</simpara>

<simpara>
For instance, you may create an image_viewer handler and assign it to MIME
types image/jpeg, image/png and image/gif. Then you would associate to
image_viewer the programs you would like to use for viewing images and the
details on how to use them. This is less cumbersome than repeating all these
details for each MIME type.
</simpara>

</section>
</section>
<section>
<title>Specifying the details for a handler</title>
<simpara>
There are three issues to specify for a handler: the program associated to it,
whether you want confirmation before using it and whether you want the
terminal to be blocked while it is being used.
</simpara>

<simpara>
When specifying any of these issues, you must tell ELinks the situation in
which it gets applied, which is typically either the text console or the X
window system. So you can specify that you don't want confirmation before
running the program when running X, and that you want it otherwise.
Similarly, when you are attaching a program (name it foo) to this handler you
must tell if it's for X or not (you can attach a second program for the other
choice if you want).
</simpara>

<section>
<title>Attaching a program to it</title>
<simpara>
You must tell ELinks the exact command for running it (with any options you
wish). In place of the filename you must enter %.
</simpara>

</section>
<section>
<title>Choosing whether you want confirmation before applying it</title>
<simpara>
This is rather simple. If you choose not to do so, then the handler will be
automatically called upon when you demand ELinks to show something attached to
this handler. Otherwise, if you ask for confirmation, you will be prompted to
open it with a external program, with additional choices that include
cancelling the operation and viewing it with ELinks. E.g: you may use this
option for programs written in C so that you may always choose if you want to
read the source with ELinks, or if you want to save it, or if you want to use
indent to display it with less.
</simpara>

</section>
<section>
<title>Choosing whether to block the terminal</title>
<simpara>
If you don't want to allow going back to ELinks (or any other program from the
same terminal) before the external program ends, then you should ask to block
the terminal.
</simpara>

</section>
</section>
</section>
<section>
<title>Setting up elinks.conf</title>
<simpara>
If you have old configuration files from old ELinks versions or from Links,
then you may use the conf-links2elinks.pl script (which is placed at
contrib/conv/ on the source distribution) to convert them to the new format.
If you don't use it you will need to edit the configuration file, and here you
will find how.
</simpara>

<section>
<title>Associating a file extension to a MIME type</title>
<simpara>
You can still do this with the UI, from the the Setup-&amp;gt;File Extensions
submenu.
</simpara>

<simpara>
If you want to do so from the configuration file, enter set mime.extension.ext
= "type", replacing ext with the appropriate file extension, and type with its
MIME type. E.g. you may want to have set mime.extension.jpg = "image/jpeg".
</simpara>

</section>
<section>
<title>Defining a handler</title>
<simpara>
For each handler you must define three items, specifying in what context the
value of the item should be applied. You must enter set
mime.handler.handler-name.item.context = value, replacing handler-name with
the name for the handler you are defining, item with the item you are defining
for this handler, context with the context this item value is to be applied,
and value with the value you want to assign to the item. You must do so for
each of the available items: program, ask and block.
</simpara>

<simpara>
The value for program is a string with the exact command you want to be issued
to view the file, placing % were you would put the file name. The values for
ask and block are either 0 (no) or 1 (yes). Available contexts include unix
and unix-xwin, which mean UNIX text terminal and X respectively (others can be
os2, win32, beos, riscos, &#8230;). The latter does not mean you are running
ELinks from X, just that the DISPLAY variable is set so that ELinks may run an
X program.
</simpara>

<simpara>
To illustrate it, here is an example. Suppose you want to define the
image_viewer handler which should be used to view images.  The configuration
file may look like this:
</simpara>

<literallayout class="monospaced">
set mime.handler.image_viewer.unix.ask = 1
set mime.handler.image_viewer.unix-xwin.ask = 0
</literallayout>
<literallayout class="monospaced">
set mime.handler.image_viewer.unix.block = 1
set mime.handler.image_viewer.unix-xwin.block = 0
</literallayout>
<literallayout class="monospaced">
set mime.handler.image_viewer.unix.program = "zgv %"
set mime.handler.image_viewer.unix-xwin.program = "xli %"
</literallayout>
<simpara>
In this example the image_viewer handler uses the svgalib image viewer zgv
when X is not available, and the X image viewer xli when it is. The terminal
would be blocked when X is not available and it would not be when it's
available. Finally, ELinks would ask for confirmation before using the handler
only with X not available.
</simpara>

</section>
<section>
<title>Associating a MIME type to a handler</title>
<simpara>
Just enter set mime.type.class.name = "handler", replacing class with the
class for the mime type, name with the specific name within that class, and
handler with the name for the handler you want to assign to the MIME type.
E.g. you may want to have set mime.type.image.jpeg = "image_viewer".
</simpara>

</section>
</section>
</chapter>
<chapter>
<title>Managing External Viewers with Mailcap</title>
<simpara>
This document describes the support for Mailcap (RFC 1524) in ELinks. It does
not describe the mailcap format. There are plenty of documents on the Web that
does this. Google and thou wilt find. ;)
</simpara>

<section>
<title>A Short Intro to Mailcap</title>
<simpara>
Mailcap is a file format defined in RFC 1524. Its purpose is to inform
multiple mail reading user agent (MUA) programs about the locally-installed
facilities for handling mail in various formats. It is designed to work with
the Multipurpose Internet Mail Extensions, known as MIME.
</simpara>

<simpara>
ELinks allows MIME handlers to be defined using its own configuration system,
so why support mailcap? It can be seen as an alternative or simply as a
supplement for setting up MIME handlers in ELinks.  Mailcap files are present
on most UNIX systems&#8212;usually in /etc/mailcap&#8212;so this makes it possible for
ELinks to know how to handle a great variety of file formats with little
configuration. To be able to use mailcap, it has to be compiled into ELinks.
This is the default. If you don't need mailcap support, just configure ELinks
with the flag: &#8212;disable-mailcap.
</simpara>

</section>
<section>
<title>Parameters to Mailcap Entries</title>
<simpara>
The code has been ported from Mutt and thereby inherits some of its various
features and limitation.
</simpara>

<simpara>
The following parameters are supported:
</simpara>

<informaltable pgwide="0"
frame="topbot"
rowsep="0" colsep="0"
>
<tgroup cols="2">
<colspec colwidth="86pt" align="left"/>
<colspec colwidth="336pt" align="left"/>
<thead>
  <row>
    <entry>
    Parameter
    </entry>
    <entry>
    Description
    </entry>
  </row>
</thead>
<tbody>
  <row>
    <entry>
    %s
    </entry>
    <entry>
    The filename that contains the data.
    </entry>
  </row>
  <row>
    <entry>
    %f
    </entry>
    <entry>
    The content type, like <emphasis>text/plain</emphasis>.
    </entry>
  </row>
</tbody>
</tgroup>
</informaltable>
<simpara>
The following parameters are not supported, since they do not really make much
sense for a non-MUA program:
</simpara>

<informaltable pgwide="0"
frame="topbot"
rowsep="0" colsep="0"
>
<tgroup cols="2">
<colspec colwidth="86pt" align="left"/>
<colspec colwidth="336pt" align="left"/>
<thead>
  <row>
    <entry>
    Parameter
    </entry>
    <entry>
    Description
    </entry>
  </row>
</thead>
<tbody>
  <row>
    <entry>
    %n
    </entry>
    <entry>
    The integer number of sub-parts in the multipart
    </entry>
  </row>
  <row>
    <entry>
    %F
    </entry>
    <entry>
    The "content-type filename" repeated for each sub-part
    </entry>
  </row>
  <row>
    <entry>
    
    </entry>
    <entry>
    The "parameter" value from the content-type field
    </entry>
  </row>
</tbody>
</tgroup>
</informaltable>
</section>
<section>
<title>Reading of Mailcap Files</title>
<simpara>
Mailcap files will be read when starting ELinks. The mailcap files to use will
be found from the mailcap path, a colon separated list of files similar to the
$PATH environment variable. The mailcap path will be determined in the
following way:
</simpara>

<itemizedlist>
<listitem>
<simpara>
From the value of the mime.mailcap.path option in elinks.conf; for example:
</simpara>
<literallayout class="monospaced">
set mime.mailcap.path = "~/.mailcap:/usr/local/etc/mailcap"
</literallayout>
</listitem>
<listitem>
<simpara>
From MAILCAP environment variable.
</simpara>
</listitem>
<listitem>
<simpara>
If non of the above is defined, the mailcap path defaults to
   "~/.mailcap:/etc/mailcap".
</simpara>
</listitem>
</itemizedlist>
</section>
<section>
<title>Fields</title>
<simpara>
Since mailcap handling is primarily for displaying of resources, all fields
like edit, print, compose etc. are ignored.
</simpara>

<simpara>
Note: Test commands are supported, but unfortunately, it's not possible to
provide the file when running the test. So any test that requires a file will
be considered failed and the handler will not be used.
</simpara>

<simpara>
Unfortunately, there are no <emphasis>native</emphasis> support for the copiousoutput field.  The
field basically mean <emphasis>needs pager</emphasis>. So it is handled by appending a pipe and a
pager program to the command. The pager program will be read from the PAGER
environment variable. If this fails, test are made for common pager programs
(/usr/bin/pager, /usr/bin/less and /usr/bin/more in that order). So if you
define png2ascii as your handler for image/png and specify copiousoutput then
the executed command will be "png2ascii |/usr/bin/less" if less is your pager
or present on your system.
</simpara>

</section>
<section>
<title>Mailcap Configuration</title>
<simpara>
Apart from the mime.mailcap.path option, you can configure if mailca support
should be disabled. The default being that it is enabled. To disable it just
put:
</simpara>

<literallayout class="monospaced">
set mime.mailcap.enable = 0
</literallayout>
<simpara>
in elinks.conf.
</simpara>

<simpara>
It is also possible to control wether ELinks should ask you before opening a
file. The option is a boolian and can be set like this:
</simpara>

<literallayout class="monospaced">
set mime.mailcap.ask = 1
</literallayout>
<simpara>
if you would like to be asked before opening a file.
</simpara>

</section>
<section>
<title>Some Sample Mailcap Entries</title>
<simpara>
Below are examples of how to specify external viewers:
</simpara>

<literallayout class="monospaced">
# Use xv if X is running
image/*;                xv %s ; test=test -n "$DISPLAY";
</literallayout>
<literallayout class="monospaced">
# Convert images to text using the netpbm tools
image/*;                (anytopnm %s | pnmscale -xysize 200 150 |                                  pnminvert | ppmtopgm | pgmtopbm |                                  pbmtoascii -1x2 ) 2&gt;&amp;1 ; copiousoutput
</literallayout>
<literallayout class="monospaced">
# Various multimedia files
audio/mpeg;             xmms '%s'; test=test -n "$DISPLAY";
application/pdf;        xpdf '%s'; test=test -n "$DISPLAY";
application/postscript; ps2ascii %s ; copiousoutput
</literallayout>
</section>
</chapter>
<chapter>
<title>Managing remote ELinks instances with -remote</title>
<simpara>
Some programs provide the ability to pass URIs to external programs.  When
stumbling upon a reference to a page you want to see, it is sometimes a kludge
to copy and paste it into ELinks.  This is where -remote can be a nifty
solution.
</simpara>

<simpara>
When invoking ELinks with the -remote argument, it does not start a new
instance, but instead connects to an already running ELinks, making it
possible to control that ELinks instance. The -remote command line switch
takes a command consisting of the action to invoke and any parameters to the
action.  Here is an example for opening freshmeat.net in a new tab:
</simpara>

<literallayout class="monospaced">
$ elinks -remote "openURL(http://freshmeat.net/, new-tab)"
</literallayout>
<simpara>
When running this command in a terminal, you will see a small delay before
ELinks returns. If no running instance was found, it will return with the
error message:
</simpara>

<literallayout class="monospaced">
ELinks: No remote session to connect to.
</literallayout>
<simpara>
All URLs passed to the openURL() commands can be URL prefixes, so the command
above could have simply used &#8220;openURL(fm, new-tab)&#8221;.
</simpara>

<section>
<title>Limitations and outstanding issues</title>
<simpara>
Remote control is implemented using the intercommunication socket created in
~/.elinks/, so the command has to be run on the same machine as the instance
you want to control; or put differently: the two ELinkses need to share a file
system that supports socket files, which rules out usage of -remote over NFS.
This also implies that the ELinks instance you want to control should be
started without passing -no-home nor -no-connect.
</simpara>

<simpara>
The built-in -remote support is to some degree compatible with the one Mozilla
provides (http://www.mozilla.org/unix/remote.html), but with some homebrew
extensions added and few unsupported features. All the supported actions are
documented below.
</simpara>

<simpara>
Under some circumstances, use of the -remote control can cause ELinks to
become unresponsive. This is cause by the current key press and mouse focus
being redirected to new tabs or dialogs opened by the -remote action.
</simpara>

</section>
<section>
<title>Remote Actions</title>
<simpara>
The command syntax is case-insensitive. For readability, we use the casing in
the listing of supported commands.
</simpara>

<simpara>
Mozilla -remote compatible commands:
</simpara>

<variablelist>
<varlistentry>
<term>
ping()
</term>
<listitem>
<simpara>
        Checks for existence of a remote instance. Makes it possible for
        scripts to query if remote controlling is possible.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
openURL()
</term>
<listitem>
<simpara>
        Prompts for a URL in current tab by opening the Goto dialog.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
openURL(URL)
</term>
<listitem>
<simpara>
        Open the passed URL in current tab.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
openURL(URL, new-tab)
</term>
<listitem>
<simpara>
        Opens the passed URL in new tab.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
openURL(URL, new-window)
</term>
<listitem>
<simpara>
        Opens the passed URL in new window.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
xfeDoCommand(openBrowser)
</term>
<listitem>
<simpara>
        Opens an ELinks instance in a new window. This ELinks instance
        will connect to the already running one.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>
ELinks extensions:
</simpara>

<variablelist>
<varlistentry>
<term>
addBookmark(URL)
</term>
<listitem>
<simpara>
        Bookmarks the passed URL.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>
-remote can also take a list of URLs without an explicit action, in which case
the URL arguments will be opened in new tabs in the remote instance. For
example, by running:
</simpara>

<literallayout class="monospaced">
$ elinks -remote slashdot.org fm g:elinks
</literallayout>
<simpara>
new tabs containing slashdot.org, freshmeat.net and a Google search of elinks
will be opened.
</simpara>

</section>
</chapter>
<chapter>
<title>The tale of ex-mode</title>
<simpara>
Are you a vim-controls nerd who wants to see them everywhere?  Welcome.
</simpara>

<simpara>
Actually ELinks doesn't shine in this area yet very much. Heck, the famous
hjkl foursome is still occupied by some feeble managers in the default keymap
(we have that in our monumental TODO lists). Still, if you know what to touch
during the compilation (&#8212;enable-exmode), you can get at least some familiar
reply to the mighty <emphasis>:</emphasis> (colon) grip.
</simpara>

<section>
<title>What it is</title>
<simpara>
Ex-mode gives you some (still very rough and only marginally complete) access
to advanced ELinks commands, to be invoked anywhere anytime, straight and
fast.
</simpara>

<simpara>
When you activate the ex-mode (named after the equivalent gadget in the vi
text editor flavours), a command line appears at the bottom of the screen for
you to type the commands.
</simpara>

<simpara>
Only two kinds of commands are supported so far. First, (almost?) anything
that can appear in the configuration file can be used in ex-mode. Second, you
can invoke (almost) any action from the ex-mode.
</simpara>

</section>
<section>
<title>Configuration directives in exmode</title>
<simpara>
There aren't many of these, so we can skim through them fast.
</simpara>

<simpara>
If you want to flip an option you know by name and refuse to engage with the
option manager visuals, you can just drop in to the ex-mode and type <emphasis>set
the.option = 1234</emphasis>. See man elinks.conf (5) or the options manager for the
list of options; you can also get a complete options tree saved to elinks.conf
if you set config.saving_style = 2 (but do NOT keep that setting unless you
know what are you doing; if we change a default value of some option in future
releases, we (generally) know what are we doing - this change won't propagate
to you during an upgrade if you already have the original default value saved
in your configuration file, though).
</simpara>

<simpara>
It's the same story with keybindings. You can use <emphasis>bind "main" "h" =
"move-cursor-left"</emphasis>. It's not the same story with keybindings documentation.
There is the elinkskeys (5) manual page but it's horribly obsolete, so don't
rely on it. You can refer to the keybindings manager for names of actions and
even their short descriptions. Also, all the <emphasis>bind</emphasis> commands are saved to the
configuration file if you set config.saving_style = 2 (but see above).
</simpara>

<simpara>
You can also use <emphasis>include my.conf</emphasis>, which will read my.conf as an ELinks
configuration file.
</simpara>

<simpara>
Actually, ELinks would eat <emphasis>#blahblah blah</emphasis> too, if you see a point in feeding
it that kind of stuff.
</simpara>

</section>
<section>
<title>Actions in exmode - or exmode in action?</title>
<simpara>
There is too many of these, so we should better skim through them fast.
</simpara>

<simpara>
Actually, we already talked about them. It's the last argument to the <emphasis>bind</emphasis>
command. So, they are those listed in the keybinding manager. So if you enter
<emphasis>move-cursor-left</emphasis> command, it will move your cursor left - by a single
character, making this a little awkward, but it's useful if you sometimes want
to easily invoke an action and you don't want to waste a key for it.
</simpara>

<simpara>
Actually, actions could theoretically take arguments too. This is currently
implemented only for the <emphasis>goto-url</emphasis> action, which can take the location it
should go at as a parameter (otherwise it opens the standard well-known dialog
as if you pressed <emphasis>g</emphasis> in the default keymap).
</simpara>

<simpara>
Regarding the mysterious "(almost)" hinted above, you can never invoke the
"quit" action from the exmode - if you type it there, "really-quit" is invoked
instead.
</simpara>

</section>
<section>
<title>How to use it</title>
<simpara>
It's simple. You press <emphasis>:</emphasis> (without the apostrophes, of course) and type in
the command, then you press enter.  E.g., <emphasis>:set config.saving_style = 3</emphasis> (this
is a good thing), <emphasis>:quit</emphasis> (and the game is over). The standard line-editing
facility is present (cursor keys and so), and the ex-mode input line has own
history.
</simpara>

</section>
<section>
<title>The "but"s</title>
<simpara>
The biggest usability hurdle so far is that there is no tab-completion. This
is why the ex-mode support is not enabled by default and part of the reason
why its practical usage is somewhat limited yet - if you don't remember
exactly what do you want to invoke, tough beans. Someone shall address this
issue in the future.
</simpara>

<simpara>
Also, perhaps wider scale of commands should be implemented in ex-mode. The
code is extremely flexible and it is very trivial to make another ex-mode
command handler, it's just that no one has done it yet ;-). Also, more actions
should be able to take arguments.
</simpara>

</section>
</chapter>
</book>
