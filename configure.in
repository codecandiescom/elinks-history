dnl Process this file with autoconf to produce a configure script.

AC_INIT(main.c)

AM_INIT_AUTOMAKE(elinks, 0.3)
AM_CONFIG_HEADER(config.h)

dnl ===================================================================
dnl Checks for programs.
dnl ===================================================================

AC_PROG_CC
AC_PROG_AWK

dnl ===================================================================
dnl Checks for special OSes.
dnl ===================================================================

AC_MSG_CHECKING([for EMX])
AC_TRY_COMPILE(, [#ifndef __EMX__
kill me!
#endif ], have_emx=yes, have_emx=no)
AC_MSG_RESULT($have_emx)
test "$have_emx" = yes && LDFLAGS=`echo "$LDFLAGS" | sed "s/-Zexe//g"`

dnl ===================================================================
dnl Checks for header files.
dnl ===================================================================

AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h limits.h sys/ioctl.h sys/time.h time.h unistd.h)
AC_CHECK_HEADERS(sigaction.h)
AC_CHECK_HEADERS(netinet/in_systm.h)
AC_CHECK_HEADERS(netinet/in_system.h)
AC_CHECK_HEADERS(netinet/ip.h)
AC_CHECK_HEADERS(sys/select.h)
AC_CHECK_HEADERS(sys/un.h)
AC_CHECK_HEADERS(sys/fmutex.h)

dnl ===================================================================
dnl Checks for typedefs, structures, and compiler characteristics.
dnl ===================================================================

AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

AC_MSG_CHECKING([for typeof])
AC_TRY_COMPILE(, [int a;
typeof(a) b;], have_typeof=yes, have_typeof=no)
AC_MSG_RESULT($have_typeof)
test "$have_typeof" = yes && AC_DEFINE(HAVE_TYPEOF)

AC_MSG_CHECKING([for long long])
AC_TRY_COMPILE(, [unsigned long long a; ], have_long_long=yes, have_long_long=no)
AC_MSG_RESULT($have_long_long)
test "$have_long_long" = yes && AC_DEFINE(HAVE_LONG_LONG)

dnl ===================================================================
dnl Checks for library functions.
dnl ===================================================================

AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
AC_FUNC_STRFTIME
AC_CHECK_FUNCS(alarm chmod timegm herror cfmakeraw)

dnl These aren't probably needed now, as they are commented in links.h.
dnl I've no idea about their historical background, but I keep them here
dnl just in the case they will help later. --pasky
AC_CHECK_FUNCS(getpid setpgid getpgid setpgrp getpgrp)

dnl ===================================================================
dnl Checks for libraries.
dnl ===================================================================

dnl Replace `main' with a function in -lgpm:
AC_CHECK_LIB(gpm, Gpm_Open)

dnl Replace `main' with a function in -lsocket:
AC_CHECK_FUNC(socket, cf_result=yes, cf_result=no)
if test "$cf_result" = no; then
	AC_CHECK_LIB(socket, socket)
fi

AC_CHECK_FUNC(setsockopt, cf_result=yes, cf_result=no)
if test "$cf_result" = no; then
	AC_CHECK_LIB(socket, setsockopt)
fi

AC_CHECK_FUNC(gethostbyname, cf_result=yes, cf_result=no)
if test "$cf_result" = no; then
	AC_CHECK_LIB(socket, gethostbyname, cf_result=yes, cf_result=no)
	if test "$cf_result" = no; then
		AC_CHECK_LIB(nsl, gethostbyname)
	else
		test -z "`echo $LIBS | grep -- -lsocket`" && LIBS="$LIBS -lsocket"
	fi
fi

dnl ===================================================================
dnl Checks for OS/2
dnl ===================================================================

AC_MSG_CHECKING([for OS/2 threads])

CFLAGS_X="$CFLAGS"
CFLAGS="$CFLAGS -Zmt"

AC_TRY_LINK([#include <stdlib.h>],
            [_beginthread(NULL, NULL, 0, NULL)], cf_result=yes, cf_result=no)
AC_MSG_RESULT($cf_result)

if test "$cf_result" = yes; then
	AC_DEFINE(HAVE_BEGINTHREAD)
	AC_CHECK_FUNC(MouOpen, AC_DEFINE(HAVE_MOUOPEN))
	AC_CHECK_FUNC(_read_kbd, AC_DEFINE(HAVE_READ_KBD))
else
	CFLAGS="$CFLAGS_X"
        # AC_CHECK_FUNC(pthread_create, cf_result=yes, cf_result=no)
        # if  test "$cf_result" = yes; then
        #	AC_DEFINE(HAVE_PTHREADS)
        # else
        #	AC_CHECK_LIB(pthread, pthread_create, AC_DEFINE(HAVE_PTHREADS)
        #	LDFLAGS="$LDFLAGS -lpthread" )
        # fi
fi

# AC_CHECK_FUNC(clone, AC_DEFINE(HAVE_CLONE))


AC_MSG_CHECKING([for XFree for OS/2])

CFLAGS_X="$CFLAGS"
LIBS_X="$LIBS"

cf_result=no

if test -n "$X11ROOT"; then
	CFLAGS="$CFLAGS_X -I$X11ROOT/XFree86/include"
	LIBS="$LIBS_X -L$X11ROOT/XFree86/lib -lxf86_gcc"
	AC_TRY_LINK([#include <pty.h>],
		    [struct winsize win;ptioctl(1, TIOCGWINSZ, &win)],
		    cf_result=yes, cf_result=no)
	if test "$cf_result" = no; then
		LIBS="$LIBS_X -L$X11ROOT/XFree86/lib -lxf86"
		AC_TRY_LINK([#include <pty.h>],
			    [struct winsize win;ptioctl(1, TIOCGWINSZ, &win)],
			    cf_result=yes, cf_result=no)
	fi
fi

if test "$cf_result" != yes; then
	CFLAGS="$CFLAGS_X"
	LIBS="$LIBS_X"
else
	AC_DEFINE(X2)
fi

AC_MSG_RESULT($cf_result)

dnl ===================================================================
dnl Check for IPv6 support and related functions.
dnl ===================================================================

AC_MSG_CHECKING([for sockaddr_storage])
AC_TRY_COMPILE([#include<sys/socket.h>],
               [int x = sizeof(struct sockaddr_storage);],
               have_sa_storage=yes, have_sa_storage=no)
AC_MSG_RESULT($have_sa_storage)
test "$have_sa_storage" = yes && AC_DEFINE(HAVE_SA_STORAGE)

AC_MSG_CHECKING([for sockaddr_in6])
AC_TRY_COMPILE([#include<sys/socket.h>
                #include<netinet/in.h>],
               [int x = sizeof(struct sockaddr_in6);],
               have_sa_in6=yes, have_sa_in6=no)
AC_MSG_RESULT($have_sa_in6)

AC_CHECK_FUNC(getaddrinfo, have_gai=yes, have_gai=no)
if test "$have_gai" != yes; then
  AC_CHECK_LIB(inet6, getaddrinfo, have_gai=yes, have_gai=no)
  if test "$have_gai" = yes; then
    LIBS="$LIBS -linet6"
  fi
fi

AC_ARG_ENABLE(ipv6, [  --disable-ipv6          disable IPv6 support],
              [if test "$enableval" = no; then disable_ipv6=yes; fi])
AC_MSG_CHECKING([for IPv6 support])

cf_result=no

if test -z "$disable_ipv6" &&
   test "$have_sa_storage" = yes &&
   test "$have_sa_in6" = yes &&
   test "$have_gai" = yes; then
	AC_DEFINE(IPV6)
	cf_result=yes
fi

AC_MSG_RESULT($cf_result)

dnl ===================================================================
dnl Check for Lua, optional even if installed.
dnl ===================================================================

dnl Do this the long way, as FreeBSD reportedly needs -L<dir> for
dnl anything dnl other than /usr/lib, and Lua is very often in
dnl /usr/local/lib.

AC_ARG_WITH(lua, [  --without-lua           disable Lua support],
            [if test "$withval" = no;  then disable_lua=yes; fi])
AC_MSG_CHECKING([for Lua])

CFLAGS_X="$CFLAGS"
LIBS_X="$LIBS"
cf_result=no

if test -z "$disable_lua"; then
	for luadir in "" /usr /usr/local; do
		if test "$cf_result" = no; then
			if test ! -z "$luadir"; then
				LIBS="-L$luadir/lib -llua -llualib -lm $LIBS_X"
				CFLAGS="$CFLAGS_X -I$luadir/include"
			else
				LIBS="-llua -llualib -lm $LIBS_X"
			fi
			AC_TRY_LINK([#include <lua.h>],
				    [lua_open(0)],
				    cf_result=yes, cf_result=no)
		fi
	done
fi

if test "$cf_result" != yes; then
	CFLAGS="$CFLAGS_X"
	LIBS="$LIBS_X"
else
	AC_DEFINE(HAVE_LUA)
fi

AC_MSG_RESULT($cf_result)

dnl ===================================================================
dnl Check for SSL support.
dnl ===================================================================

dnl For wiping SSL hooks..
#ifdef HAVE_SSL

AC_ARG_WITH(ssl, [  --without-ssl           disable SSL support],
            [if test "$withval" = no;  then disable_ssl=yes; fi])
AC_MSG_CHECKING([for OpenSSL])

CFLAGS_X="$CFLAGS"
LIBS_X="$LIBS"
cf_result=no

if test -z "$disable_ssl"; then
	for ssldir in "" /usr /usr/local/openssl /usr/lib/openssl \
			 /usr/local/ssl /usr/local/www /usr/lib/ssl \
			 /usr/local /usr/pkg /opt /opt/openssl; do
		if test "$cf_result" = no; then
			if test ! -z "$ssldir"; then
				LIBS="-L$ssldir/lib -lssl -lcrypto $LIBS_X"
				CFLAGS="$CFLAGS_X -I$ssldir/include"
			else
				LIBS="-lssl -lcrypto $LIBS_X"
			fi
			AC_TRY_LINK([#include <openssl/ssl.h>],
				    [OpenSSL_add_all_algorithms()],
				    cf_result=yes, cf_result=no)
			if test "$cf_result" != yes; then
				AC_TRY_LINK([#include <openssl/ssl.h>],
					    [SSLeay_add_ssl_algorithms()],
					    cf_result=yes, cf_result=no)
			fi
		fi
	done

	if test "$cf_result" != yes; then
		if test "$withval" = yes; then
			AC_MSG_ERROR("OpenSSL not found")
		fi
	        CFLAGS="$CFLAGS_X"
        	LIBS="$LIBS_X"
	else
		AC_DEFINE(HAVE_SSL)
	fi
fi

AC_MSG_RESULT($cf_result)

#endif

test "$have_emx" = yes && LDFLAGS="$LDFLAGS -Zexe"

AC_OUTPUT(Makefile)

# if test -z "$AWK"; then
# 	AC_WARN([awk not found. You won't be able to rebuild code page table.]);
# fi
