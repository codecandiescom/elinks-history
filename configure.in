dnl Process this file with autoconf to produce a configure script.

AC_INIT(src/main.c)

AM_INIT_AUTOMAKE(elinks, 0.9.CVS)
AM_CONFIG_HEADER(config.h)

AC_PROG_MAKE_SET
AC_PREREQ(2.13)

dnl ===================================================================
dnl Load feature configuration file.
dnl ===================================================================

if test "x$srcdir" != x; then
	features="$srcdir/features.conf"
else
	features="features.conf"
fi

AC_MSG_CHECKING([for feature file])
if test -e "$features"; then
	. $features
	AC_MSG_RESULT($features)
else
	AC_MSG_RESULT(not found)
fi


dnl ===================================================================
dnl Checks for programs.
dnl ===================================================================

AC_PROG_CC
AC_PROG_AWK
AC_PROG_RANLIB

dnl gcc specific options (to be continued at the bottom of configure)
if test "x$ac_cv_prog_gcc" = "xyes"; then
  dnl We want to see all warnings and live with none.
  dnl We can't set up -Werror here as there may be some warnings in test
  dnl suite of configure, and we don't want to fail them.
  CFLAGS="$CFLAGS -Wall"
fi

dnl ===================================================================
dnl Checks for special OSes.
dnl ===================================================================

AC_MSG_CHECKING([for EMX])
AC_TRY_COMPILE(, [#ifndef __EMX__
kill me!
#endif ], have_emx=yes, have_emx=no)
AC_MSG_RESULT($have_emx)
test "$have_emx" = yes && LDFLAGS=`echo "$LDFLAGS" | sed "s/-Zexe//g"`

dnl ===================================================================
dnl Checks for header files.
dnl ===================================================================

AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h limits.h time.h unistd.h)
AC_CHECK_HEADERS(sigaction.h)
AC_CHECK_HEADERS(arpa/inet.h)
AC_CHECK_HEADERS(netinet/in_systm.h netinet/in_system.h netinet/ip.h)
AC_CHECK_HEADERS(net/if.h netdb.h netinet/in.h netinet/in6_var.h)
AC_CHECK_HEADERS(ifaddrs.h)
AC_CHECK_HEADERS(sys/cygwin.h io.h)
AC_CHECK_HEADERS(sys/fmutex.h)
AC_CHECK_HEADERS(sys/ioctl.h sys/sockio.h)
AC_CHECK_HEADERS(sys/resource.h)
AC_CHECK_HEADERS(sys/select.h)
AC_CHECK_HEADERS(sys/signal.h)
AC_CHECK_HEADERS(sys/time.h)
AC_CHECK_HEADERS(sys/un.h)
AC_CHECK_HEADERS(sys/utsname.h)
AC_CHECK_HEADERS(stdint.h inttypes.h)
AC_CHECK_HEADERS(locale.h)

dnl ===================================================================
dnl Macros for various checks. (TODO: Move to m4/)
dnl ===================================================================

dnl TODO: Make EL_CONFIG* macros assume CONFIG_* defines so it is poosible
dnl to write EL_CONFIG_DEPENDS(SCRIPTING, [GUILE LUA PERL], [...])

dnl EL_CONFIG(define, what)
AC_DEFUN([EL_CONFIG], [
	  $1=yes;
	  AC_DEFINE($1, 1, [Define if you want $2])])

dnl EL_CONFIG_DEPENDS(define, CONFIG_* dependencies, what)
AC_DEFUN([EL_CONFIG_DEPENDS],
[
	AC_MSG_CHECKING([for $3])
	$1=no;
	for dependency in $2; do
		# Hope this is portable?!? --jonas
		eval el_config_value=$`echo $dependency`;
		if test "$el_config_value" = yes; then
			EL_CONFIG($1, [$3])
			break;
		fi
	done
	AC_MSG_RESULT([$]$1)
])

dnl EL_ARG_ENABLE(define, name, conf-help, arg-help)
AC_DEFUN([EL_ARG_ENABLE],
[
	AC_ARG_ENABLE($2, [$4],
	[
		if test "$withval" != no; then withval="yes"; fi
		$1="$withval";
	])

	AC_MSG_CHECKING([for $3])
	if test "x[$]$1" = xyes; then
		EL_CONFIG($1, [$3])
		AC_MSG_RESULT(yes)
	else
		AC_MSG_RESULT(no)
	fi
])

dnl EL_ARG_DEPEND(define, name, depend, conf-help, arg-help)
AC_DEFUN([EL_ARG_DEPEND],
[
	AC_ARG_ENABLE($2, [$5],
	[
		if test "$withval" != no; then withval="yes"; fi
		$1="$withval";
	])

	ENABLE_$1="[$]$1";
	AC_MSG_CHECKING([for $4])
	if test "x[$]$1" = xyes; then
		# require all dependencies to be met
		for dependency in $3; do
			# Hope this is portable?!? --jonas
			eval el_config_value=$`echo $dependency`;
			if test "x$el_config_value" != xyes; then
				ENABLE_$1=no;
				break;
			fi
		done

		if test "[$]ENABLE_$1" = yes; then
			EL_CONFIG($1, [$4])
		fi
	fi
	AC_MSG_RESULT([$]ENABLE_$1)
])

dnl EL_DEFINE(define, what)
AC_DEFUN([EL_DEFINE], [AC_DEFINE($1, 1, [Define if you have $2])])

dnl EL_CHECK_CODE(type, define, includes, code)
AC_DEFUN([EL_CHECK_CODE],
[
	$2=yes;
	AC_MSG_CHECKING([for $1])
	AC_TRY_COMPILE([$3], [$4], [EL_DEFINE($2, [$1])], $2=no)
	AC_MSG_RESULT([$]$2)
])

dnl EL_CHECK_SYS_TYPE(type, define, includes)
AC_DEFUN([EL_CHECK_SYS_TYPE],
[
	EL_CHECK_CODE([$1], [$2], [
#include <sys/types.h>
$3
	], [int a = sizeof($1);])
])

dnl EL_CHECK_NET_TYPE(type, define, include)
AC_DEFUN([EL_CHECK_NET_TYPE],
[
	EL_CHECK_SYS_TYPE([$1], [$2], [
#include<sys/socket.h>
$3
	])
])

dnl EL_CHECK_INT_TYPE(type, define)
AC_DEFUN([EL_CHECK_INT_TYPE],
[
	EL_CHECK_SYS_TYPE([$1], [$2], [
#ifdef HAVE_STDINT_H
#include <stdint.h>
#endif
#ifdef HAVE_INTTYPES_H
#include <inttypes.h>
#endif
	])
])


dnl Save and restore the current build flags

AC_DEFUN([EL_SAVE_FLAGS],
[
	CFLAGS_X="$CFLAGS";
	CPPFLAGS_X="$CPPFLAGS";
	LDFLAGS_X="$LDFLAGS";
	LIBS_X="$LIBS";
])

AC_DEFUN([EL_RESTORE_FLAGS],
[
	CFLAGS="$CFLAGS_X";
	CPPFLAGS="$CPPFLAGS_X";
	LDFLAGS="$LDFLAGS_X";
	LIBS="$LIBS_X";
])

dnl ===================================================================
dnl Checks for typedefs, structures, and compiler characteristics.
dnl ===================================================================

AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

EL_CHECK_CODE(typeof, HAVE_TYPEOF, [], [int a; typeof(a) b;])
EL_CHECK_SYS_TYPE(long long, HAVE_LONG_LONG, [])
EL_CHECK_INT_TYPE(int32_t, HAVE_INT32_T)
EL_CHECK_INT_TYPE(uint32_t, HAVE_UINT32_T)

AC_CHECK_SIZEOF(char, 1)
AC_CHECK_SIZEOF(short, 2)
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(long, 4)
test "x$HAVE_LONG_LONG" = xyes && AC_CHECK_SIZEOF(long long, 8)

dnl Check for variadic macros
EL_CHECK_CODE([variadic macros], HAVE_VARIADIC_MACROS,
		[#include <stdio.h>
		 #define a(b,c...) printf(b,##c)],
                [a("foo");a("%s","bar");a("%s%s","baz","quux");])

dnl Check for -rdynamic
AC_MSG_CHECKING([for -rdynamic])
LDFLAGS_X="$LDFLAGS"
LDFLAGS="$LDFLAGS -rdynamic"
AC_TRY_LINK([], [], have_rdynamic=yes, have_rdynamic=no)
test "$have_rdynamic" = no && LDFLAGS="$LDFLAGS_X"
AC_MSG_RESULT($have_rdynamic)

dnl ===================================================================
dnl Check for POSIX <regex.h>
dnl ===================================================================

EL_CHECK_SYS_TYPE(regex_t, HAVE_REGEX_H, [#include <regex.h>])

dnl ===================================================================
dnl Checks for library functions.
dnl ===================================================================

AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
AC_FUNC_STRFTIME
AC_CHECK_FUNCS(cfmakeraw gethostbyaddr herror strerror)
AC_CHECK_FUNCS(popen uname access chmod alarm timegm)
AC_CHECK_FUNCS(strcasecmp strncasecmp strcasestr strstr strchr strrchr)
AC_CHECK_FUNCS(memmove bcopy stpcpy strdup index mempcpy)
AC_CHECK_FUNCS(isalnum)
AC_CHECK_FUNCS(snprintf vsnprintf asprintf vasprintf)
AC_CHECK_FUNCS(getuid geteuid)
AC_CHECK_FUNCS(getifaddrs)
AC_CHECK_FUNCS(fflush fsync)

AC_HAVE_FUNCS(cygwin_conv_to_full_win32_path)

AC_CHECK_FUNCS(setenv, [have_setenv=yes], [have_setenv=no])

dnl These aren't probably needed now, as they are commented in links.h.
dnl I've no idea about their historical background, but I keep them here
dnl just in the case they will help later. --pasky
AC_CHECK_FUNCS(getpid setpgid getpgid setpgrp getpgrp)

AC_CACHE_CHECK([for __va_copy],el_cv_HAVE_VA_COPY,[
AC_TRY_LINK([#include <stdarg.h>
va_list ap1,ap2;], [__va_copy(ap1,ap2);],
el_cv_HAVE_VA_COPY=yes,el_cv_HAVE_VA_COPY=no)])
if test x"$el_cv_HAVE_VA_COPY" = x"yes"; then
	EL_DEFINE(HAVE_VA_COPY, __va_copy)
fi

AC_CACHE_CHECK([for C99 vsnprintf],el_cv_HAVE_C99_VSNPRINTF,[
AC_TRY_RUN([
#include <sys/types.h>
#include <stdarg.h>
void foo(const char *format, ...) {
       va_list ap;
       int len;
       char buf[5];

       va_start(ap, format);
       len = vsnprintf(buf, 0, format, ap);
       va_end(ap);
       if (len != 5) exit(1);

       va_start(ap, format);
       len = vsnprintf(0, 0, format, ap);
       va_end(ap);
       if (len != 5) exit(1);

       if (snprintf(buf, 3, "hello") != 5 || strcmp(buf, "he") != 0) exit(1);

       exit(0);
}
main() { foo("hello"); }
],
el_cv_HAVE_C99_VSNPRINTF=yes,el_cv_HAVE_C99_VSNPRINTF=no,el_cv_HAVE_C99_VSNPRINTF=cross)])
if test x"$el_cv_HAVE_C99_VSNPRINTF" = x"yes"; then
	EL_DEFINE(HAVE_C99_VSNPRINTF, [C99 compliant vsnprintf()])
fi

AC_CHECK_LIB(dl, dlopen) # OpenSSL and Lua frequently needs it

dnl ===================================================================
dnl Checks for libraries.
dnl ===================================================================

dnl Replace `main' with a function in -lsocket:
AC_CHECK_FUNC(socket, cf_result=yes, cf_result=no)
if test "$cf_result" = no; then
	AC_CHECK_LIB(socket, socket)
fi

AC_CHECK_FUNC(setsockopt, cf_result=yes, cf_result=no)
if test "$cf_result" = no; then
	AC_CHECK_LIB(socket, setsockopt)
fi

AC_CHECK_FUNC(gethostbyname, cf_result=yes, cf_result=no)
if test "$cf_result" = no; then
	AC_CHECK_LIB(socket, gethostbyname, cf_result=yes, cf_result=no)
	if test "$cf_result" = no; then
		AC_CHECK_LIB(nsl, gethostbyname)
	else
		test -z "`echo $LIBS | grep -- -lsocket`" && LIBS="$LIBS -lsocket"
	fi
fi

dnl ===================================================================
dnl Checks for a libraries, optional even if installed.
dnl ===================================================================

dnl AC_CHECK_OPTIONAL_LIBRARY(name, header, lib, function, confhelp)

AC_DEFUN([EL_CHECK_OPTIONAL_LIBRARY],
[
	AC_ARG_WITH($1, [$5],
	[ if test "$withval" = no; then withval=""; disable_$1=yes; fi])

	AC_MSG_CHECKING([for $1 support])
	if test "x$withval" = xyes; then withval=""; fi

	if test -z "$disable_$1"; then
		AC_MSG_RESULT(yes)
		EL_SAVE_FLAGS
		if test -d "$withval"; then
			CFLAGS="$CFLAGS -I$withval/include";
			CPPFLAGS="$CPPFLAGS -I$withval/include";
			LDFLAGS="$LDFLAGS -L$withval/lib";
		fi

		AC_CHECK_HEADERS($2, cf_result=yes, cf_result=no)
		if test "$cf_result" = yes; then
			AC_CHECK_LIB($3, $4)
		fi

		if test "$cf_result" != yes; then
			EL_RESTORE_FLAGS
		fi
	else
		AC_MSG_RESULT(disabled)
	fi
])

EL_CHECK_OPTIONAL_LIBRARY(gpm, gpm.h, gpm, Gpm_Open,
	[  --without-gpm           disable gpm (mouse) support])

EL_CHECK_OPTIONAL_LIBRARY(zlib, zlib.h, z, gzdopen,
	[  --without-zlib          disable zlib support])

EL_CHECK_OPTIONAL_LIBRARY(bzlib, bzlib.h, bz2, BZ2_bzReadOpen,
	[  --without-bzlib         disable bzlib support])

dnl ===================================================================
dnl XBEL support
dnl ===================================================================

AC_CHECK_HEADERS(expat.h, cf_result=yes, cf_result=no)
if test "$cf_result" = yes; then
	AC_CHECK_LIB(expat, XML_ParserCreate, [have_expat=yes], [have_expat=no])
	if test "$have_expat" = yes; then
		LIBS="$LIBS -lexpat"
	fi
fi


dnl ===================================================================
dnl Checks for OS/2
dnl ===================================================================

AC_MSG_CHECKING([for OS/2 threads])

EL_SAVE_FLAGS
CFLAGS="$CFLAGS -Zmt"

AC_TRY_LINK([#include <stdlib.h>],
            [_beginthread(NULL, NULL, 0, NULL)], cf_result=yes, cf_result=no)
AC_MSG_RESULT($cf_result)

if test "$cf_result" = yes; then
	EL_DEFINE(HAVE_BEGINTHREAD, [_beginthread()])
else
	EL_RESTORE_FLAGS
fi

AC_CHECK_FUNC(MouOpen, EL_DEFINE(HAVE_MOUOPEN, [MouOpen()]))
AC_CHECK_FUNC(_read_kbd, EL_DEFINE(HAVE_READ_KBD, [_read_kbd()]))

AC_MSG_CHECKING([for XFree for OS/2])

EL_SAVE_FLAGS

cf_result=no

if test -n "$X11ROOT"; then
	CFLAGS="$CFLAGS_X -I$X11ROOT/XFree86/include"
	LIBS="$LIBS_X -L$X11ROOT/XFree86/lib -lxf86_gcc"
	AC_TRY_LINK([#include <pty.h>],
		    [struct winsize win;ptioctl(1, TIOCGWINSZ, &win)],
		    cf_result=yes, cf_result=no)
	if test "$cf_result" = no; then
		LIBS="$LIBS_X -L$X11ROOT/XFree86/lib -lxf86"
		AC_TRY_LINK([#include <pty.h>],
			    [struct winsize win;ptioctl(1, TIOCGWINSZ, &win)],
			    cf_result=yes, cf_result=no)
	fi
fi

if test "$cf_result" != yes; then
	EL_RESTORE_FLAGS
else
	EL_DEFINE(X2, [XFree under OS/2])
fi

AC_MSG_RESULT($cf_result)

dnl ===================================================================
dnl Check for Guile, optional even if installed.
dnl ===================================================================

enable_guile="no";

AC_ARG_WITH(guile, [  --with-guile            enable Guile support],
            [ if test "$withval" != no; then enable_guile=yes; fi ])

# The following is probably bad, ugly and so on. Stolen from Guile's (1.4)
# GUILE_FLAGS but I really don't want to require people to have Guile in order
# to compile CVS. Also, the macro seems to be really stupid regarding searching
# for Guile in $PATH etc. --pasky

AC_MSG_CHECKING([for Guile])

if test "$enable_guile" = "yes"; then
	AC_MSG_RESULT(yes);
	## Based on the GUILE_FLAGS macro.

	AC_PATH_PROG(GUILE_CONFIG, guile-config, "no", "$withval:$PATH")

	## First, let's just see if we can find Guile at all.
	if test "$GUILE_CONFIG" != no; then
		cf_result="yes";

		GUILE_LIBS="`guile-config link`"
		GUILE_CFLAGS="`guile-config compile`"
		LIBS="$GUILE_LIBS $LIBS"
		CFLAGS="$CFLAGS $GUILE_CFLAGS"
		CPPFLAGS="$CPPFLAGS $GUILE_CFLAGS"
		EL_CONFIG(CONFIG_GUILE, [Guile scripting])
		cat <<EOF
***********************************************************************
The Guile support is incomplete and not so well integrated to ELinks
yet. That means, ie., that you have no Guile console and there might
not be all the necessary hooks. Also, the Guile interface is not too
well tested (success stories heartily welcomed!).  See
src/scripting/guile/README for further details and hints.
***********************************************************************
EOF
	else
		AC_MSG_WARN([Guile support disabled])
	fi
else
	AC_MSG_RESULT(no);
fi

dnl ===================================================================
dnl Check for Perl
dnl ===================================================================
enable_perl="no";

AC_ARG_WITH(perl, [  --with-perl             enable Perl support],
            [
if test "$withval" = yes; then
	withval="";
	enable_perl=yes;
	cat <<EOF
***********************************************************************
The Perl support is incomplete and not so well integrated to ELinks
yet. That means, ie., that you have no Perl console and there might
not be all the necessary hooks. Also, the Perl interface is not too
well tested (success stories heartily welcomed!).
***********************************************************************
EOF
fi
	    ])



AC_MSG_CHECKING([for Perl])

cf_result=no

EL_SAVE_FLAGS

if test "$enable_perl" = "yes"; then
	PERL_LIBS="`perl -MExtUtils::Embed -e ldopts`"
	PERL_CFLAGS="`perl -MExtUtils::Embed -e ccopts`"
	LIBS="$PERL_LIBS $LIBS"
	CFLAGS="$CFLAGS $PERL_CFLAGS"
	CPPFLAGS="$CPPFLAGS $PERL_CFLAGS"
	cf_result="yes";
fi

if test "$cf_result" != "yes"; then
	EL_RESTORE_FLAGS
else
	EL_CONFIG(CONFIG_PERL, [Perl scripting])
fi

AC_SUBST(PERL_LIBS)
AC_SUBST(PERL_CFLAGS)

if test "$cf_result"; then AC_MSG_RESULT($cf_result); fi

dnl ===================================================================
dnl Check for Lua, optional even if installed.
dnl ===================================================================

dnl Do this the long way, as FreeBSD reportedly needs -L<dir> for
dnl anything other than /usr/lib, and Lua is very often in /usr/local/lib.

AC_ARG_WITH(lua, [  --without-lua           disable Lua support],
            [if test "$withval" = no; then withval=""; disable_lua=yes; fi])
AC_MSG_CHECKING([for Lua])

if test "$withval" = yes; then withval=""; fi

EL_SAVE_FLAGS
cf_result=no

if test -z "$disable_lua"; then
	if test ! -d "$withval"; then
		withval="";
	fi
	for luadir in "$withval" "" /usr /usr/local; do
		for suffix in "" 50 40; do
			if test "$cf_result" = no; then
				LUA_LIBS="-llua$suffix -llualib$suffix -lm"

				if test ! -z "$luadir"; then
					LUA_LIBS="-L$luadir/lib $LUA_LIBS"
					LUA_CFLAGS="-I$luadir/include -I$luadir/include/lua$suffix"
				fi

				LIBS="$LUA_LIBS $LIBS_X"
				CFLAGS="$CFLAGS_X $LUA_CFLAGS"
				CPPFLAGS="$CPPFLAGS_X $LUA_CFLAGS"

				AC_TRY_LINK([#include <lua.h>],
					    [lua_close(0)],
					    cf_result=yes, cf_result=no)
			fi
		done
	done
fi

AC_MSG_RESULT($cf_result)

if test "$cf_result" != yes; then
	EL_RESTORE_FLAGS
else
	EL_CONFIG(CONFIG_LUA, [Lua scripting])
	AC_CHECK_HEADERS(lauxlib.h)
	AC_CHECK_FUNCS(lua_pcall)
fi

AC_SUBST(LUA_LIBS)
AC_SUBST(LUA_CFLAGS)

dnl ===================================================================
dnl Setup global scripting
dnl ===================================================================

EL_CONFIG_DEPENDS(CONFIG_SCRIPTING, [CONFIG_GUILE CONFIG_LUA CONFIG_PERL], [scripting support])

dnl ===================================================================
dnl Check for SSL support.
dnl ===================================================================

dnl We by default use OpenSSL, and we always prefer it. However, when GNUTLS
dnl is enabled, we won't try to use OpenSSL anymore.

dnl For wiping SSL hooks..
#ifdef CONFIG_SSL

disable_openssl=""
disable_gnutls=""
enable_gnutls=""

AC_ARG_WITH(gnutls, [  --without-gnutls        disable GNUTLS SSL support],
	    [if test "$with_gnutls" = no;  then disable_gnutls=yes; fi])
AC_ARG_WITH(gnutls, [  --with-gnutls[[=prefix]]  enable GNUTLS SSL support],
	    [if test "$with_gnutls" != no;  then enable_gnutls=yes; fi])
gnutls_withval="$withval"

if test "$enable_gnutls" = yes; then
	disable_openssl=yes;
fi

AC_ARG_WITH(openssl, [  --without-openssl       disable OpenSSL support],
	    [if test "$with_openssl" = no;  then disable_openssl=yes; fi])
AC_ARG_WITH(openssl, [  --with-openssl[[=prefix]] enable OpenSSL support (default)])
openssl_withval="$withval"

dnl ---- OpenSSL

AC_MSG_CHECKING([for OpenSSL])

EL_SAVE_FLAGS
cf_result="no"

if test "$disable_openssl" = yes; then
	cf_result="not used"
else
	# Rule number 6.5: do _not_ put ssl headers in yes dir ;-)
	if test "$openssl_withval" = "yes"; then
		openssl_withval=""
	fi

	for ssldir in "$openssl_withval" "" /usr /usr/local/openssl \
			 /usr/lib/openssl /usr/local/ssl \
			 /usr/local/www /usr/lib/ssl /usr/local \
			 /usr/pkg /opt /opt/openssl; do
		if test "$cf_result" = no; then
			if test ! -z "$ssldir"; then
				LIBS="-L$ssldir/lib -lssl -lcrypto $LIBS_X"
				CFLAGS="$CFLAGS_X -I$ssldir/include"
				CPPFLAGS="$CPPFLAGS_X -I$ssldir/include"
#				# FIXME: This created serious portability problems. --pasky
#				if test "$CC" == "gcc"; then
#					# I'm not sure about compatibility here. --pasky
#					LIBS="$LIBS -R$ssldir/lib"
#				fi
			else
				LIBS="-lssl -lcrypto $LIBS_X"
			fi
			AC_TRY_LINK([#include <openssl/ssl.h>],
				    [OpenSSL_add_all_algorithms()],
				    cf_result=yes, cf_result=no)
			if test "$cf_result" != yes; then
				AC_TRY_LINK([#include <openssl/ssl.h>],
					    [SSLeay_add_ssl_algorithms()],
					    cf_result=yes, cf_result=no)
			fi
		fi
	done

	if test "$cf_result" != yes; then
		if test "$withval" = yes; then
			AC_MSG_ERROR("OpenSSL not found")
		fi
		EL_RESTORE_FLAGS
	else
		EL_CONFIG(CONFIG_OPENSSL, [SSL using OpenSSL])
	fi
fi

AC_MSG_RESULT($cf_result)

dnl ---- GNU TLS
dnl We can't have AC_MSG_CHECKING here, because AC_PATH_PROG prints its own and
dnl it looks ugly then.

if test "$cf_result" = yes; then
	cf_result="not used"
else
	EL_SAVE_FLAGS
	cf_result="no"

	if test -z "$disable_gnutls"; then
		# Sure, we maybe _could_ use their macro, but how to ensure
		# that the ./configure script won't fail if the macro won't be
		# found..? :( --pasky
		for ssldir in "$gnutls_withval" "" /usr/local/gnutls /opt /opt/gnutls; do
			if test "$cf_result" = no; then

				if test "x$ssldir" != "x"; then
				   libgnutls_config_args="$libgnutls_config_args --prefix=$ssldir"
				   if test x${LIBGNUTLS_CONFIG+set} != xset ; then
				      LIBGNUTLS_CONFIG=$ssldir/bin/libgnutls-config
				   fi
				fi

				AC_PATH_PROG(LIBGNUTLS_CONFIG, libgnutls-config, no, "$PATH:$ssldir")

				if test "$LIBGNUTLS_CONFIG" = "no" ; then
					cf_result=no
				else
					LIBGNUTLS_CFLAGS=`$LIBGNUTLS_CONFIG $libgnutls_config_args --cflags`
					LIBGNUTLS_LIBS=`$LIBGNUTLS_CONFIG $libgnutls_config_args --libs`

					LIBS="$LIBGNUTLS_LIBS $LIBS_X"
					CFLAGS="$CFLAGS_X $LIBGNUTLS_CFLAGS"
					CPPFLAGS="$CPPFLAGS_X $LIBGNUTLS_CFLAGS"

					# Verify if it's really usable
					AC_TRY_LINK([#include <gnutls/gnutls.h>],
						    [gnutls_check_version(NULL)],
						    cf_result=yes, cf_result=no)
				fi
			fi
		done

		if test "$cf_result" != yes; then
			if test "$withval" = yes; then
				AC_MSG_CHECKING([for GNU TLS])
				AC_MSG_ERROR("GNUTLS not found")
			fi
			EL_RESTORE_FLAGS
		else
			EL_CONFIG(CONFIG_GNUTLS, [SSL using GNUTLS])
		fi
	fi
fi

AC_MSG_CHECKING([for GNU TLS])
AC_MSG_RESULT($cf_result)

dnl Final SSL setup

EL_CONFIG_DEPENDS(CONFIG_SSL, [CONFIG_OPENSSL CONFIG_GNUTLS], [SSL support])

#endif

AC_MSG_CHECKING([whether to be or not to be])
AC_MSG_RESULT([needs to be determined experimentally])

dnl ===================================================================
dnl Check for IPv6 support and related functions.
dnl ===================================================================

EL_CHECK_NET_TYPE(struct sockaddr_storage, HAVE_SA_STORAGE, [])
EL_CHECK_NET_TYPE(struct sockaddr_in6, HAVE_SA_IN6, [#include <netinet/in.h>])
EL_CHECK_NET_TYPE(struct addrinfo, HAVE_ADDRINFO, [#include <netdb.h>])

AC_CHECK_FUNC(getaddrinfo, have_gai=yes, have_gai=no)
if test "$have_gai" != yes; then
  AC_CHECK_LIB(inet6, getaddrinfo, have_gai=yes, have_gai=no)
  if test "$have_gai" = yes; then
    LIBS="$LIBS -linet6"
  fi
fi

AC_ARG_ENABLE(ipv6, [  --disable-ipv6          disable IPv6 support],
              [if test "$enableval" = no; then disable_ipv6=yes; fi])
AC_MSG_CHECKING([for IPv6 support])

cf_result=no

if test -z "$disable_ipv6" &&
   test "$HAVE_SA_STORAGE" = yes &&
   test "$HAVE_SA_IN6" = yes &&
   test "$HAVE_ADDRINFO" = yes &&
   test "$have_gai" = yes; then
	EL_CONFIG(CONFIG_IPV6, [IPv6 support])
	cf_result=yes
fi

AC_MSG_RESULT($cf_result)


dnl ===================================================================
dnl Checking for X11 (window title restoring).
dnl ===================================================================

AC_PATH_X
if test -z "$no_x"; then
	if test -n "$x_includes"; then
		CFLAGS="$CFLAGS -I$x_includes"
		CPPFLAGS="$CPPFLAGS -I$x_includes"
	fi
	if test -n "$x_libraries"; then
		LDFLAGS="$LDFLAGS -L$x_libraries"
	fi
	LIBS="-lX11 $LIBS"
	EL_DEFINE(HAVE_X11, [X11])
fi


dnl ===================================================================
dnl Backtraces displaying support.
dnl ===================================================================

AC_CHECK_HEADERS(execinfo.h, have_execinfo=yes, have_execinfo=no)
# possible checks for other system-specific means go here


dnl ===================================================================
dnl SMB protocol support.
dnl ===================================================================

AC_CHECK_PROG(have_smbclient, smbclient, yes, no)


dnl ===================================================================
dnl Gettext grey zone. Beware.
dnl ===================================================================

ALL_LINGUAS="be bg ca cs da de el es et fi fr gl hr hu id is it leet lt nl no pl pt pt_BR ro ru sk sv tr uk"

AM_GNU_GETTEXT


dnl ===================================================================
dnl Compile-time features control
dnl ===================================================================

EL_ARG_ENABLE(CONFIG_BOOKMARKS, bookmarks, [bookmark support],
	      [  --disable-bookmarks     disable bookmark support])

EL_ARG_DEPEND(CONFIG_XBEL_BOOKMARKS, xbel, have_expat, [xbel bookmark support],
	      [  --disable-xbel          disable xbel bookmark support (requires expat)])


EL_ARG_ENABLE(CONFIG_COOKIES, cookies, [cookies],
	      [  --disable-cookies       disable cookie support])

EL_ARG_ENABLE(CONFIG_FORMHIST, formhist, [form history support],
	      [  --disable-formhist      disable form history support])

EL_ARG_ENABLE(CONFIG_GLOBHIST, globhist, [global history support],
	      [  --disable-globhist      disable global history support])


EL_ARG_ENABLE(CONFIG_MAILCAP, mailcap, [mailcap support],
	      [  --disable-mailcap       disable mailcap support])

EL_ARG_ENABLE(CONFIG_MIMETYPES, mimetypes, [mimetypes file support],
	      [  --disable-mimetypes     disable mimetypes file support])


EL_ARG_ENABLE(CONFIG_URI_REWRITE, uri-rewrite, [URI rewriting support],
	      [  --disable-uri-rewrite   disable URI rewrite support])

EL_ARG_DEPEND(CONFIG_CGI, cgi, have_setenv, [local CGI support],
	      [  --enable-cgi            enable local CGI support])

EL_ARG_DEPEND(CONFIG_SMB, smb, have_smbclient, [SMB protocol support],
	      [  --disable-smb           disable SMB protocol support (requires smbclient)])


EL_ARG_ENABLE(CONFIG_MOUSE, mouse, [mouse support],
	      [  --disable-mouse         disable mouse support])

EL_ARG_ENABLE(CONFIG_256_COLORS, 256-colors, [256 color support],
	      [  --enable-256-colors     enable 256 color support])


EL_ARG_ENABLE(CONFIG_EXMODE, exmode, [exmode interface],
	      [  --enable-exmode         enable exmode (CLI) interface])

EL_ARG_ENABLE(CONFIG_LEDS, leds, [LEDs support],
	      [  --enable-leds           enable LEDs support])


EL_ARG_DEPEND(CONFIG_BACKTRACE, backtrace, have_execinfo, [backtrace support],
	      [  --disable-backtrace     disable backtrace support])

EL_ARG_DEPEND(CONFIG_NO_ROOT_EXEC, backtrace, [have_getuid have_geteuid], [no root exec support],
	      [  --enable-backtrace      enable prevention of usage by root])


EL_ARG_ENABLE(CONFIG_DEBUG, debug, [leak debugging and error checking],
	      [  --enable-debug          enable leak debug and internal error checking])

AC_ARG_ENABLE(fastmem,
              [  --enable-fastmem        enable direct use of system allocation functions, not usable with --enable-debug],
	      [if test "$enableval" = yes && test "$CONFIG_DEBUG" != yes; then EL_CONFIG(CONFIG_FASTMEM, [fast memory and no error checking]) fi])

EL_ARG_ENABLE(CONFIG_OWN_LIBC, own-libc, [usage of own libc stubs],
              [  --enable-own-libc       force use of internal functions instead of those of system libc])

EL_ARG_ENABLE(CONFIG_SMALL, small, [reducing binary size],
              [  --enable-small          reduce binary size as far as possible])


AC_ARG_ENABLE(weehoofooboomookerchoo,
              [
    Also check out the feature.conf file for more information about features!
	      ],
	      [AC_MSG_ERROR(Are you strange, or what?)])


dnl == EMX hack

test "$have_emx" = yes && LDFLAGS="$LDFLAGS -Zexe"
test "$have_emx" = yes && LDFLAGS=`echo "$LDFLAGS" | sed "s/-Zbin-files//g"`


dnl ===================================================================
dnl Export directory paths
dnl ===================================================================

# Set up the ``entry points'' if they were not supplied by builder
test "x$prefix" = xNONE && prefix=$ac_default_prefix
test "x$exec_prefix" = xNONE && exec_prefix=${prefix}

# Create CONFDIR #define for config.h

# XXX: This may be dependent on a particular version of autoconf. Whatever,
# it's autoconf fault to force us to do such hacks ;p.
if test x"$sysconfdir" = x"\${prefix}/etc"; then
  # sysconfdir is set to its default value... fine, let's append /elinks/
  # XXX: We can't modify listing of the default in ./configure --help :-(
  sysconfdir_n=`eval echo "$sysconfdir"`
  sysconfdir=$sysconfdir_n
  (echo "$sysconfdir" | grep elinks >/dev/null 2>/dev/null) || \
	sysconfdir="$sysconfdir/elinks"
fi

CONFDIR=$sysconfdir
AC_DEFINE_UNQUOTED(CONFDIR, "$CONFDIR", [Directory containing default config])
AC_SUBST(CONFDIR)

# Create LOCALEDIR #define for config.h
LOCALEDIR=`eval echo "$datadir/locale"`
AC_DEFINE_UNQUOTED(LOCALEDIR, "$LOCALEDIR", [Directory containing locales])
AC_SUBST(LOCALEDIR)

# Create LIBDIR #define for config.h
LIBDIR=`eval echo "$libdir"`
AC_DEFINE_UNQUOTED(LIBDIR, "$LIBDIR", [Directory containing libraries])
AC_SUBST(LIBDIR)


dnl ===================================================================
dnl A little fine tuning of gcc specific options (continued)
dnl ===================================================================

if test "x$ac_cv_prog_gcc" = "xyes"; then
  if test "x$hm_enabled_debug" = "xyes"; then
    dnl We want to see all warnings and live with none (in debug mode).
    CFLAGS="$CFLAGS -Werror"
  fi

  case "`gcc -dumpversion`" in
    3.0|3.1|3.2)
      # These should be ok using -Werror
      ;;
    3.*)
      # If gcc is version 3.3 (or higher?) it emits lots of false positive
      # "dereferencing type-punned pointer will break strict-aliasing rules"
      # warnings. Disable them by not doing any strict-aliasing. The
      # alternative is just too ugly. Thanks gcc guys!! ;)
      CFLAGS="$CFLAGS -fno-strict-aliasing"
      ;;
    *)
      # These should be ok using -Werror
      ;;
  esac
fi


dnl ===================================================================
dnl Generated files
dnl ===================================================================

AC_OUTPUT([ \
 Makefile \
 Unicode/Makefile \
 contrib/Makefile \
 contrib/elinks.spec \
 contrib/lua/hooks.lua \
 doc/Makefile \
 doc/man/Makefile \
 doc/man/man1/Makefile \
 doc/man/man1/elinks.1 \
 doc/man/man5/Makefile \
 intl/Makefile \
 po/Makefile \
 src/Makefile \
 src/bfu/Makefile \
 src/bookmarks/Makefile \
 src/bookmarks/backend/Makefile \
 src/cache/Makefile \
 src/config/Makefile \
 src/cookies/Makefile \
 src/dialogs/Makefile \
 src/document/Makefile \
 src/document/css/Makefile \
 src/document/html/Makefile \
 src/document/html/parser/Makefile \
 src/document/plain/Makefile \
 src/encoding/Makefile \
 src/formhist/Makefile \
 src/globhist/Makefile \
 src/intl/Makefile \
 src/intl/gettext/Makefile \
 src/intl/gettext/ref-add.sed \
 src/intl/gettext/ref-del.sed \
 src/lowlevel/Makefile \
 src/mime/Makefile \
 src/mime/backend/Makefile \
 src/modules/Makefile \
 src/osdep/Makefile \
 src/osdep/beos/Makefile \
 src/osdep/os2/Makefile \
 src/osdep/riscos/Makefile \
 src/osdep/unix/Makefile \
 src/osdep/win32/Makefile \
 src/protocol/Makefile \
 src/protocol/auth/Makefile \
 src/protocol/file/Makefile \
 src/protocol/ftp/Makefile \
 src/protocol/http/Makefile \
 src/protocol/rewrite/Makefile \
 src/protocol/smb/Makefile \
 src/sched/Makefile \
 src/scripting/Makefile \
 src/scripting/guile/Makefile \
 src/scripting/lua/Makefile \
 src/scripting/perl/Makefile \
 src/ssl/Makefile \
 src/terminal/Makefile \
 src/util/Makefile \
 src/viewer/Makefile \
 src/viewer/dump/Makefile \
 src/viewer/text/Makefile \
 test/Makefile
])
