#!/usr/bin/gawk -f
# $Id: conf-links2elinks.awk,v 1.2 2002/07/03 11:28:15 pasky Exp $
#
# (GAWK is necessary for bitwise operators.)
#
# This script converts html.cfg and links.cfg files of Links and older ELinks
# versions to the new ELinks' elinks.conf. Intended use:
#
#     cat .links/html.cfg .links/links.cfg |
#       conf-links2elinks.awk > .elinks/elinks.conf

BEGIN {
	print "# This file was automatically generated by " \
		"links_to_elinks.awk -- feel free\n# to mess around!"

	system_id[1] = "unix"
	system_id[2] = "os2"
	system_id[3] = "win32"
	system_id[4] = "beos"
	system_id[5] = "riscos"
	system_id[6] = "atheos"

	# get_token() vars
	pos = 0
	line = ""
}

function get_token()
{
	backwhacked = 0
	quote = 0
	token = ""
	len = length(line)
	for (; pos <= len; ++pos) {
		char = substr(line, pos, 1)
		if (backwhacked) {
			backwhacked = 0
		} else if (char == "\\") {
			backwhacked = 1
		} else if (char == "\"") {
			quote = !quote
		} else if ((char == " " || char == "	") && !quote) {
			break
		}
		token = token char
	}
	++pos

	return token
}

###
### links.conf
###

function print_association(name, system_str, ask, block, program)
{
	print "set mime.handler." name "." system_str ".ask = " ask
	print "set mime.handler." name "." system_str ".block = " block
	print "set mime.handler." name "." system_str ".program = " program
}

$1 == "accesskey_enter" { print "set document.browse.accesskey.auto_follow = " $2 }
$1 == "accesskey_priority" { print "set document.browse.accesskey.priority = " $2 }
$1 == "allow_special_files" { print "set protocol.file.allow_special_files = " $2 }
$1 == "async_dns" { print "set connection.async_dns = " $2 }
$1 == "color_dirs" { print "set document.browse.links.color_dirs = " $2 }
$1 == "cookies_accept" { print "set cookies.accept_policy = " $2 }
$1 == "cookies_paranoid_security" { print "set cookies.paranoid_security = " $2 }
$1 == "cookies_save" { print "set cookies.save = " $2 }
$1 == "cookies_resave" { print "set cookies.resave = " $2 }
$1 == "download_dir" { print "set document.download.directory = " $2 }
$1 == "download_utime" { print "set document.download.set_original_time = " $2 }
$1 == "dump_width" { print "set document.dump.width = " $2 }
$1 == "format_cache_size" { print "set document.cache.format.size = " $2 }
$1 == "form_submit_auto" { print "set document.browse.forms.auto_submit = " $2 }
$1 == "form_submit_confirm" { print "set document.browse.forms.confirm_submit = " $2 }
$1 == "ftp.anonymous_password" { print "set protocol.ftp.anon_passwd = " $2 }
$1 == "ftp_proxy" { print "set protocol.ftp.proxy.host = " $2 }
$1 == "http_bugs.allow_blacklist" { print "set protocol.http.bugs.allow_blacklist = " $2 }
$1 == "http_bugs.bug_302_redirect" { print "set protocol.http.bugs.broken_302_redirect = " $2 }
$1 == "http_bugs.bug_post_no_keepalive" { print "set protocol.http.bugs.post_no_keepalive = " $2 }
$1 == "http_bugs.http10" { print "set protocol.http.bugs.http10 = " $2 }
$1 == "http_proxy" { print "set protocol.http.proxy.host = " $2 }
$1 == "http_referer" { print "set protocol.http.referer.policy = " $2 }
$1 == "fake_referer" { print "set protocol.http.referer.fake = " $2 }
$1 == "enable_global_history" { print "set document.history.global.enable = " $2 }
$1 == "keep_unhistory" { print "set document.history.keep_unhistory = " $2 }
$1 == "language" { print "set ui.language = " $2 }
$1 == "max_connections" { print "set connection.max_connections = " $2 }
$1 == "max_connections_to_host" { print "set connection.max_connections_to_host = " $2 }
$1 == "memory_cache_size" { print "set document.cache.memory.size = " $2 }
$1 == "receive_timeout" { print "set connection.receive_timeout = " $2 }
$1 == "retries" { print "set connection.retries = " $2 }
$1 == "show_status_bar" { print "set ui.show_status_bar = " $2 }
$1 == "show_title_bar" { print "set ui.show_title_bar = " $2 }
$1 == "unrestartable_receive_timeout" { print "set connection.unrestartable_receive_timeout = " $2 }
$1 == "user_agent" { print "set protocol.http.user_agent = " $2 }
$1 == "terminal" {
	$2 = substr($2, 2, length($2) - 2)
	print "set terminal." $2 ".type = " $4
	print "set terminal." $2 ".m11_hack = " $4
	print "set terminal." $2 ".utf_8_io = " (($7 == "") ? "0" : $7)
	print "set terminal." $2 ".restrict_852 = " !!and($5, 2)
	print "set terminal." $2 ".block_cursor = " !!and($5, 4)
	print "set terminal." $2 ".colors = " and($5, 1)
	print "set terminal." $2 ".charset = \"" $6 "\""
}
$1 == "extension" {
	num_exts = split(substr($2, 2, length($2) - 2), ext, /,/)
	for (i = num_exts; i; --i)
		print "set mime.extension." ext[i] " = " $3
}
$1 == "association" {
	pos = length($1) + 2
	line = $0

	name = get_token()
	name = substr(name, 2, length(name) - 2)
	gsub(/[[:blank:]]/, "_", name)
	gsub(/[^[:alnum:]_]/, "-", name)

	mimelist = get_token()
	mimelist = substr(mimelist, 2, length(mimelist) - 2)
	gsub(/\//, ".", mimelist)
	num_mimetypes = split(mimelist, mimetype, /,/)

	program = get_token()

	flags = $(NF - 1)
	cons = and(flags, 1)
	xwin = and(flags, 2)
	ask = !!and(flags, 4)
	block = (and(flags, 8) || and(flags, 16)) ? !!and(flags, 16) \
						  : (!xwin || cons)

	for (i = num_mimetypes; i; i--)
		print "set mime.type." mimetype[i] " = \"" name "\""
	if (cons || $NF != 1)
		print_association(name, system_id[$NF], ask, block, program)
	if (xwin && $NF == 1)
		print_association(name, system_id[$NF] "-xwin", ask, block, program)
}
$1 == "mailto" || $1 == "telnet" || $1 == "tn3270" {
	val = gensub(/^[^ ]* (".*") .$/, "\\1", $0)
	gsub(/%/, $1 == "mailto" ? "%h" : "%h:%p", val)
	print "set protocol.user." $1 "." system_id[$NF] " = " val
	if ($NF = 1) # Only Unix has X.
		print "set protocol.user." $1 "." system_id[$NF] "-xwin = " val
}

###
### html.conf
###

$1 == "html_assume_codepage" { print "set document.codepage.assume = \"" $2 "\"" }
$1 == "html_avoid_dark_on_black" { print "set document.allow_dark_on_black = " !$2 }
$1 == "html_frames" { print "set document.html.display_frames = " $2 }
$1 == "html_hard_assume" { print "set document.codepage.force_assumed = " $2 }
$1 == "html_images" { print "set document.browse.images.show_as_links = " $2 }
$1 == "html_margin" { print "set document.browse.margin_width = " $2 }
$1 == "html_numbered_links" { print "set document.browse.links.numbering = " $2 }
$1 == "html_tables" { print "set document.html.display_tables = " $2 }
$1 == "html_table_order" { print "set document.browse.table_move_order = " $2 }
$1 == "html_use_document_colours" { print "set document.colors.use_document_colors = " $2 }
